; 
; program grove.pas
; 
CPM:            equ     1               ; Target is CP/M .com file
; 
                include "/Users/joerg/Projekte/pl0/pl0.z80"
; 
                jp      main
; 
; [0] (* Built-ins that do not have to be defined in the compiler itself. *)
; [1] 
; [2] type
; [3]   PBlock = ^TBlock;
; [4]   TBlock = record
; [5]     Next: PBlock;
; [6]     Size: Integer;
; [7]   end;
; [8] 
; [9] var
; [10]   HeapPtr: PBlock absolute '__heapptr';
; [11] 
; [12]   AssertPassed: Integer absolute '__assertpassed';
; [13]   AssertFailed: Integer absolute '__assertfailed';
; [14] 
; [15] procedure FreeMem(P: Pointer; Size: Integer); register; external '__freemem';
; [16] (*var
; [17]   Q: PBlock;
; [18] begin
; [19]   Q := P;
; [20]   Q^.Size := Size;
; [21]   Q^.Next := HeapPtr;
; [22]   HeapPtr := Q;
; [23]   P := nil;
; [24] end;
; [25] *)
; [26] 
; [27] procedure GetMem(var P: Pointer; Size: Integer); register; external '__getmem';
; 
; [28] (*var
; [29]   Q, R: PBlock;
; [30] begin
; [31]   Q := nil;
; [32]   R := HeapPtr;
; [33]   while R <> nil do
; [34]   begin
; [35]     if R^.Size = Size then
; [36]     begin
; [37]       if Q = nil then
; [38]         HeapPtr := R^.Next
; [39]       else
; [40]         Q^.Next := R^.Next;
; [41] 
; [42]       P := R;
; [43] 
; [44]       Exit;
; [45]     end
; [46]     else if R^.Size >= Size + 4 then
; [47]     begin
; [48]       if Q = nil then
; [49]       begin
; [50]         HeapPtr := Ptr(Ord(R) + Size);
; [51]         HeapPtr^.Size := R^.Size - Size;
; [52]         HeapPtr^.Next := R^.Next;
; [53]       end
; [54]       else
; [55]       begin
; [56]         Q^.Next := Ptr(Ord(R) + Size);
; [57]         Q^.Next^.Size := R^.Size - Size;
; [58]         Q^.Next^.Next := R^.Next;
; [59]       end;
; [60] 
; [61]       P := R;
; [62] 
; [63]       Exit;
; [64]     end;
; [65] 
; [66]     Q := R;
; [67]     R := R^.Next;
; [68]   end;
; [69] 
; [70]   WriteLn('Out of memory error');
; [71]   while True do;
; [72] end;
; [73] *)
; [74] 
; [75] {
; [76] procedure InitHeap(Bytes: Integer);
; [77] var
; [78]   P: Pointer;
; [79] begin
; [80]   HeapPtr := nil;
; [81]   P := Ptr(32768); (* GetHeapStart; *)
; [82]   FreeMem(P, Bytes);
; [83] end;
; [84] 
; [85] function MemAvail: Integer;
; [86] var
; [87]   P: PBlock;
; [88]   I: Integer;
; [89] begin
; [90]   P := HeapPtr;
; [91]   I := 0;
; [92]   while P <> nil do
; [93]   begin
; [94]     I := I + P^.Size;
; [95]     P := P^.Next;
; [96]   end;
; [97] 
; [98]   MemAvail := I;
; [99] end;
; [100] 
; [101] function MaxAvail: Integer;
; [102] var
; [103]   P: PBlock;
; [104]   I: Integer;
; [105] begin
; [106]   P := HeapPtr;
; [107]   I := 0;
; [108]   while P <> nil do
; [109]   begin
; [110]     if P^.Size > I then I := P^.Size;
; [111]     P := P^.Next;
; [112]   end;
; [113] 
; [114]   MaxAvail := I;
; [115] end;
; [116] }
; [117] 
; [118] type
; 
; [119]   TString = String[255];
; [120] 
; [121] function Random(Range: Integer): Integer; register; external '__random';
; [122] 
; [123] function Length(S: TString): Integer; stdcall; external '__length';
; 
; [124] function Concat(S, T: TString): TString; stdcall; external '__concat';
; 
; [125] function Pos(S, T: TString): Integer; stdcall; external '__pos';
; 
; [126] function Copy(S: TString; Start: Integer; Count: Integer): TString; stdcall; external '__copy';
; 
; [127] procedure Insert(S: TString; var T: TString; Start: Integer); stdcall; external '__insert';
; 
; [128] procedure Delete(var S: TString; Start: Integer; Count: Integer); stdcall; external '__delete';
; 
; [129] 
; [130] procedure Val(S: TString; var I, Code: Integer); stdcall; external '__val_int';
; 
; [131] {
; [132] procedure Str(I: Integer; var S: TString); stdcall; external '__str_int';
; [133] }
; [134] 
; [135] procedure ClrScr; register; external '__clrscr';
; 
; [136] procedure GotoXY(X, Y: Integer); register; external '__gotoxy';
; 
; [137] procedure TextColor(I: Integer); register; external '__textfg';
; 
; [138] procedure TextBackground(I: Integer); register; external '__textbg';
; 
; [139] procedure CursorOn; register; external '__cursor_on';
; 
; [140] procedure CursorOff; register; external '__cursor_off';
; 
; [141] 
; [142] (* Arithmetic functions *)
; [143] 
; [144] (* function Abs(I: Integer): Integer  *) (* built-in *)
; [145] (* function Abs(R: Real): Real        *) (* built-in *)
; [146] function ArcTan(R: Real): Real; register; external 'ATN';
; 
; [147] function Cos(R: Real): Real; register; external 'COS';
; 
; [148] function Exp(R: Real): Real; register; external 'EXP';
; 
; [149] function Frac(R: Real): Real; register; external 'FRAC';
; 
; [150] function Int(R: Real): Real; register; external 'INT';
; 
; [151] function Ln(R: Real): Real; register; external 'LN';
; 
; [152] function Log(R: Real): Real; register; external 'LOG';
; 
; [153] function Pi: Real; register; external 'ACPI';
; 
; [154] function Sin(R: Real): Real; register; external 'SIN';
; 
; [155] function Sqr(R: Real): Real; register; external '__fltpwr2';
; 
; [156] function Sqrt(R: Real): Real; register; external 'SQR';
; 
; [157] function Tan(R: Real): Real; register; external 'TAN';
; 
; [158] 
; [159] function Fix(R: Real): Integer; register; external 'FIX';
; 
; [160] 
; [161] (* Scalar functions *
; [162] 
; [163] (* Pred, Succ, Odd *)
; [164] 
; [165] (* Transfer functions *)
; [166] 
; [167] (* Chr, Ord, Round, Trunc *)
; [168] 
; [169] (* Miscellaneous functions *)
; [170] 
; [171] (* 
; [172]   Hi ld l,h, ld h,0
; [173]   KeyPressed
; [174]   Lo ld h,0
; [175]   Random
; [176]   Random(I)
; [177]   ParamCount
; [178]   ParamStr
; [179]   SizeOf ok
; [180]   Swap ld a,h, ld h,l, ld l,a
; [181]   UpCase  -> lib z80
; [182] *)
; [0] program Grove;
; 
; [1] 
; [2] {$I /Users/joerg/Projekte/pl0/lib/Files.pas}
; [0] type
; [1]   FileControlBlock = record
; [2]     DR: Byte;
; [3]     FN: array[0..7] of Char;
; [4]     TN: array[0..2] of Char;
; [5]     EX, S1, S2, RC: Byte;
; [6]     AL: array[0..15] of Byte;
; [7]     CR: Byte;
; [8]     RN: array[0..2] of Byte;
; [9]   end;
; [10] 
; [11]   Text = record
; [12]     Offset: Integer;
; [13]     Writing: Boolean;
; [14]     FCB: FileControlBlock;
; [15]     DMA: array[0..127] of Char;
; [16]   end;
; [17] 
; [18] procedure Assign(var T: Text; S: TString);
; [19] var
; [20]   I: Integer;
; [21] begin
; var T(+262), S(+6), I(-2)
; 
proc29:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-2
                add     hl,sp
                ld      sp,hl
; [22]   T.FCB.DR := 0;
                ld      de,ix
                ld      hl,262
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [23] 
; [24]   for I := 1 to 8 do
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,1            ; Literal 1
                pop     hl
                ld      (hl),de
                ld      de,8            ; Literal 8
                push    de
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak32
forloop31:
; [25]     T.FCB.FN[I - 1] := S[I];
                ld      de,ix
                ld      hl,262
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,1            ; Literal 1
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                pop     hl
                add     hl,de
                ld      d,0
                ld      e,(hl)
                pop     hl
                ld      (hl),e
fornext33:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak32
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop31
forbreak32:     pop     de              ; Cleanup limit
; [26] 
; [27]   for I := 10 to 12 do
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,10           ; Literal 10
                pop     hl
                ld      (hl),de
                ld      de,12           ; Literal 12
                push    de
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak35
forloop34:
; [28]     T.FCB.TN[I - 10] := S[I];
                ld      de,ix
                ld      hl,262
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,9            ; Literal 9
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,10           ; Literal 10
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                pop     hl
                add     hl,de
                ld      d,0
                ld      e,(hl)
                pop     hl
                ld      (hl),e
fornext36:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak35
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop34
forbreak35:     pop     de              ; Cleanup limit
; [29] end;
exit30:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [30] 
; [31] procedure Reset(var T: Text);
; 
; [32] var
; [33]   A: Integer;
; [34] begin
; var T(+6), A(-2)
; 
proc37:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-2
                add     hl,sp
                ld      sp,hl
; [35]   T.FCB.EX := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,12           ; Literal 12
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [36]   T.FCB.S1 := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,13           ; Literal 13
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [37]   T.FCB.S2 := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,14           ; Literal 14
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [38]   T.FCB.RC := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,15           ; Literal 15
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [39]   T.FCB.CR := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,32           ; Literal 32
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [40] 
; [41]   T.Writing := False;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,2            ; Literal 2
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [42] 
; [43]   A := Bdos(15, Addr(T.FCB));
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,15           ; Literal 15
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                push    ix
                ld      c,l
                call    5
                pop     ix
                ld      l,a
                ld      h,0
                ld      de,hl
                pop     hl
                ld      (hl),de
; [44] 
; [45]   T.Offset := 128;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                push    hl
                ld      de,128          ; Literal 128
                pop     hl
                ld      (hl),de
; [46] end;
exit38:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [47] 
; [48] procedure Rewrite(var T: Text);
; 
; [49] var
; [50]   A: Integer;
; [51] begin
; var T(+6), A(-2)
; 
proc39:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-2
                add     hl,sp
                ld      sp,hl
; [52]   T.FCB.EX := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,12           ; Literal 12
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [53]   T.FCB.S1 := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,13           ; Literal 13
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [54]   T.FCB.S2 := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,14           ; Literal 14
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [55]   T.FCB.RC := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,15           ; Literal 15
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [56]   T.FCB.CR := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,32           ; Literal 32
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [57] 
; [58]   T.Writing := True;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,2            ; Literal 2
                pop     hl
                add     hl,de
                push    hl
                ld      de,1            ; Literal 1
                pop     hl
                ld      (hl),e
; [59] 
; [60]   A := Bdos(19, Addr(T.FCB));
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,19           ; Literal 19
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                push    ix
                ld      c,l
                call    5
                pop     ix
                ld      l,a
                ld      h,0
                ld      de,hl
                pop     hl
                ld      (hl),de
; [61]   A := Bdos(22, Addr(T.FCB));
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,22           ; Literal 22
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                push    ix
                ld      c,l
                call    5
                pop     ix
                ld      l,a
                ld      h,0
                ld      de,hl
                pop     hl
                ld      (hl),de
; [62] 
; [63]   T.Offset := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
; [64] end;
exit40:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [65] 
; [66] procedure ReadRec(var T: Text);
; 
; [67] var
; [68]   A: Integer;
; [69] begin
; var T(+6), A(-2)
; 
proc41:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-2
                add     hl,sp
                ld      sp,hl
; [70]   A := Bdos(26, Addr(T.DMA));
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,26           ; Literal 26
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,39           ; Literal 39
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                push    ix
                ld      c,l
                call    5
                pop     ix
                ld      l,a
                ld      h,0
                ld      de,hl
                pop     hl
                ld      (hl),de
; [71]   A := Bdos(20, Addr(T.FCB));
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,20           ; Literal 20
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                push    ix
                ld      c,l
                call    5
                pop     ix
                ld      l,a
                ld      h,0
                ld      de,hl
                pop     hl
                ld      (hl),de
; [72]   T.Offset := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
; [73] end;
exit42:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [74] 
; [75] function ReadChar(var T: Text): Char;
; 
; [76] var
; [77]   C: Char;
; [78] begin
; var ReadChar(+8), T(+6), C(-2)
; 
func43:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-2
                add     hl,sp
                ld      sp,hl
; [79]   if T.Offset > 127 then ReadRec(T);
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,127          ; Literal 127
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,false45
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                call    proc41
; Cleanup 2 bytes
                pop     hl
false45:
; [80]   C := T.DMA[T.Offset];
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,39           ; Literal 39
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                pop     hl
                add     hl,de
                ld      d,0
                ld      e,(hl)
                pop     hl
                ld      (hl),e
; [81]   if C <> #26 then T.Offset := T.Offset + 1;
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      d,0
                ld      e,(hl)
                push    de
                ld      de,26           ; Literal 26
                pop     hl
                call    __int16_neq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,false46
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
false46:
; [82]   ReadChar := C;
                ld      de,ix
                ld      hl,8
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      d,0
                ld      e,(hl)
                pop     hl
                ld      (hl),e
; [83] end;
exit44:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [84] 
; [85] procedure ReadLine(var T: Text; var S: TString);
; 
; [86] var
; [87]   C: Char;
; [88] begin
; var T(+8), S(+6), C(-2)
; 
proc47:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-2
                add     hl,sp
                ld      sp,hl
; [89]   S := '';
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      hl,string49
                pop     de
                ld      a,255
                call    __movestr
; [90] 
; [91]   while Length(S) < 255 do
while50:
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                call    __loadstr
                call    __length
; Cleanup 256 bytes
                ld      hl,256          ; Clear
                add     hl,sp
                ld      sp,hl
                ld      de,255          ; Literal 255
                pop     hl
                call    __int16_lt
                ld      h,0
                ld      l,a
                push    hl
; [92]   begin
                pop     hl
                bit     0,l
                jp      z,false51
; [93]     C := ReadChar(T);
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                push    hl
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                push    de
                call    func43
; Cleanup 2 bytes
                pop     hl
                pop     de
                pop     hl
                ld      (hl),e
; [94] 
; [95]     if C = #10 then Break;
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      d,0
                ld      e,(hl)
                push    de
                ld      de,10           ; Literal 10
                pop     hl
                call    __int16_eq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,false52
                jp      false51         ; Break
false52:
; [96]     if C = #26 then Break;
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      d,0
                ld      e,(hl)
                push    de
                ld      de,26           ; Literal 26
                pop     hl
                call    __int16_eq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,false53
                jp      false51         ; Break
false53:
; [97] 
; [98]     if C >= ' ' then S := S + C;
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      d,0
                ld      e,(hl)
                push    de
                ld      de,32           ; Literal 32
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,false54
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                call    __loadstr
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      d,0
                ld      e,(hl)
                ld      hl,-254
                add     hl,sp
                ld      sp,hl
                ld      d,e
                ld      e,1
                push    de
                call    __stradd
                ld      hl,256          ; Clear
                add     hl,sp
                ld      sp,hl
                ld      a,255
                call    __storestr
false54:
; [99]   end;
                jp      while50
false51:
; [100] end;
exit48:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [101] 
; [102] procedure WriteRec(var T: Text);
; 
; [103] var
; [104]   A: Integer;
; [105] begin
; var T(+6), A(-2)
; 
proc55:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-2
                add     hl,sp
                ld      sp,hl
; [106]   A := Bdos(26, Addr(T.DMA));
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,26           ; Literal 26
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,39           ; Literal 39
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                push    ix
                ld      c,l
                call    5
                pop     ix
                ld      l,a
                ld      h,0
                ld      de,hl
                pop     hl
                ld      (hl),de
; [107]   A := Bdos(21, Addr(T.FCB));
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,21           ; Literal 21
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                push    ix
                ld      c,l
                call    5
                pop     ix
                ld      l,a
                ld      h,0
                ld      de,hl
                pop     hl
                ld      (hl),de
; [108]   T.Offset := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
; [109] end;
exit56:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [110] 
; [111] 
; [112] procedure WriteChar(var T: Text; C: Char);
; 
; [113] begin
; var T(+8), C(+6)
; 
proc57:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,0
                add     hl,sp
                ld      sp,hl
; [114]   if T.Offset > 127 then WriteRec(T);
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,127          ; Literal 127
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,false59
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                push    de
                call    proc55
; Cleanup 2 bytes
                pop     hl
false59:
; [115]   T.DMA[T.Offset] := C;
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,39           ; Literal 39
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      d,0
                ld      e,(hl)
                pop     hl
                ld      (hl),e
; [116]   T.Offset := T.Offset + 1;
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
; [117] end;
exit58:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [118] 
; [119] procedure WriteLine(var T: Text; S: TString);
; 
; [120] var
; [121]   I: Integer;
; [122] begin
; var T(+262), S(+6), I(-2)
; 
proc60:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-2
                add     hl,sp
                ld      sp,hl
; [123]   for I := 1 to Length(S) do WriteChar(T, S[I]);
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,1            ; Literal 1
                pop     hl
                ld      (hl),de
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                call    __loadstr
                call    __length
; Cleanup 256 bytes
                ld      hl,256          ; Clear
                add     hl,sp
                ld      sp,hl
                pop     de              ; Dup and pre-check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak63
forloop62:
                ld      de,ix
                ld      hl,262
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                pop     hl
                add     hl,de
                ld      d,0
                ld      e,(hl)
                push    de
                call    proc57
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
fornext64:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak63
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop62
forbreak63:     pop     de              ; Cleanup limit
; [124] 
; [125]   WriteChar(T, #13);
                ld      de,ix
                ld      hl,262
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,13           ; Literal 13
                push    de
                call    proc57
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
; [126]   WriteChar(T, #10);
                ld      de,ix
                ld      hl,262
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,10           ; Literal 10
                push    de
                call    proc57
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
; [127] end;
exit61:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [128] 
; [129] function IsEof(var T: Text): Boolean;
; 
; [130] begin
; var IsEof(+8), T(+6)
; 
func65:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,0
                add     hl,sp
                ld      sp,hl
; [131]   if T.Offset > 127 then ReadRec(T);
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,127          ; Literal 127
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,false67
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                call    proc41
; Cleanup 2 bytes
                pop     hl
false67:
; [132]   IsEof := T.DMA[T.Offset] = #26;
                ld      de,ix
                ld      hl,8
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,39           ; Literal 39
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                pop     hl
                add     hl,de
                ld      d,0
                ld      e,(hl)
                push    de
                ld      de,26           ; Literal 26
                pop     hl
                call    __int16_eq
                ld      h,0
                ld      l,a
                ld      de,hl
                pop     hl
                ld      (hl),e
; [133] end;        
exit66:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [134] 
; [135] procedure Close(var T: Text);
; 
; [136] var
; [137]   A: Integer;
; [138] begin
; var T(+6), A(-2)
; 
proc68:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-2
                add     hl,sp
                ld      sp,hl
; [139]   if T.Writing then
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,2            ; Literal 2
                pop     hl
                add     hl,de
                ld      d,0
                ld      e,(hl)
                push    de
; [140]   begin
                pop     hl
                bit     0,l
                jp      z,false70
; [141]     WriteChar(T, #26);
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,26           ; Literal 26
                push    de
                call    proc57
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
; [142]     WriteRec(T);
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                call    proc55
; Cleanup 2 bytes
                pop     hl
; [143]   end;
false70:
; [144] 
; [145]   A := Bdos(16, Addr(T.FCB));
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,16           ; Literal 16
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                push    ix
                ld      c,l
                call    5
                pop     ix
                ld      l,a
                ld      h,0
                ld      de,hl
                pop     hl
                ld      (hl),de
; [146] end;
exit69:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [3] 
; [4] const
; 
; [5]   FileName = 'INPUT   .TXT';
; [6] 
; [7] type
; [8]   PNode = ^TNode;
; [9]   TNode = record
; [10]     Value: Integer;
; [11]     Prev, Next: PNode;
; [12]   end;
; [13] 
; [14] var
; [15]   Nodes: array[0..4999] of TNode;
global72:       ds      30000           ; Global Nodes
; [16] 
; [17]   Count: Integer;
global73:       ds      2               ; Global Count
; [18] 
; [19] procedure Move(Node, Prev, Next: PNode);
; [20] begin
; var Node(+10), Prev(+8), Next(+6)
; 
proc74:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,0
                add     hl,sp
                ld      sp,hl
; [21]   if (Node = Prev) or (Node = Next) then Exit;
                ld      de,ix
                ld      hl,10
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_eq
                ld      h,0
                ld      l,a
                push    hl
                ld      de,ix
                ld      hl,10
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_eq
                ld      h,0
                ld      l,a
                ld      de,hl
                pop     hl
                ld      a,l
                or      e
                ld      l,a
                bit     0,l
                jp      z,false76
                jp      exit75          ; Exit
false76:
; [22] 
; [23]   Node^.Prev^.Next := Node^.Next;
                ld      de,ix
                ld      hl,10
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,2            ; Literal 2
                pop     hl
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,4            ; Literal 4
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,10
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,4            ; Literal 4
                pop     hl
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
; [24]   Node^.Next^.Prev := Node^.Prev;
                ld      de,ix
                ld      hl,10
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,4            ; Literal 4
                pop     hl
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,2            ; Literal 2
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,10
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,2            ; Literal 2
                pop     hl
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
; [25] 
; [26]   Prev^.Next := Node;
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,4            ; Literal 4
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,10
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
; [27]   Node^.Prev := Prev;
                ld      de,ix
                ld      hl,10
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,2            ; Literal 2
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
; [28]   
; [29]   Next^.Prev := Node;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,2            ; Literal 2
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,10
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
; [30]   Node^.Next := Next;
                ld      de,ix
                ld      hl,10
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,4            ; Literal 4
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
; [31] end;
exit75:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [32] 
; [33] procedure Mix(Node: PNode);
; 
; [34] var
; [35]   Temp: PNode;
; [36]   I: Integer;
; [37] begin
; var Node(+6), Temp(-2), I(-4)
; 
proc77:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-4
                add     hl,sp
                ld      sp,hl
; [38] (*  Write('.'); *)
; [39] 
; [40]   Temp := Node;
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
; [41] 
; [42]   if Temp^.Value > 0 then
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                push    hl
; [43]   begin
                pop     hl
                bit     0,l
                jp      z,false79
; [44]     for I := 0 to Temp^.Value mod (Count - 1) - 1 do Temp := Temp^.Next;
                ld      de,ix
                ld      hl,-4
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                push    de
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                pop     hl
                call    __sdiv16        ; Mod
                ex      hl,de
                push    hl
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                push    de
                push    de
                ld      de,ix
                ld      hl,-4
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak81
forloop80:
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,4            ; Literal 4
                pop     hl
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
fornext82:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-4
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak81
                ld      de,ix
                ld      hl,-4
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop80
forbreak81:     pop     de              ; Cleanup limit
; [45]     Move(Node, Temp, Temp^.Next); 
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,4            ; Literal 4
                pop     hl
                add     hl,de
                ld      de,(hl)
                push    de
                call    proc74
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
; [46]   end
; [47]   else if Temp^.Value < 0 then
                jp      endif83
false79:
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                call    __int16_lt
                ld      h,0
                ld      l,a
                push    hl
; [48]   begin
                pop     hl
                bit     0,l
                jp      z,false84
; [49]     for I := 0 to -Temp^.Value mod (Count - 1) - 1 do Temp := Temp^.Prev;
                ld      de,ix
                ld      hl,-4
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                push    de
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                pop     hl
                call    __sdiv16        ; Mod
                ex      hl,de
                ld      de,hl
                ld      hl,0
                xor     a
                sbc     hl,de
                push    hl
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                push    de
                push    de
                ld      de,ix
                ld      hl,-4
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak86
forloop85:
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,2            ; Literal 2
                pop     hl
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
fornext87:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-4
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak86
                ld      de,ix
                ld      hl,-4
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop85
forbreak86:     pop     de              ; Cleanup limit
; [50]     Move(Node, Temp^.Prev, Temp);
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,2            ; Literal 2
                pop     hl
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                push    de
                call    proc74
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
; [51]   end;
false84:
endif83:
; [52] end;
exit78:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [53] 
; [54] procedure Dump(Node: PNode);
; 
; [55] var
; [56]   Temp: PNode;
; [57] begin
; var Node(+6), Temp(-2)
; 
proc88:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-2
                add     hl,sp
                ld      sp,hl
; [58]   Temp := Node;
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
; [59] 
; [60]   repeat
repeat90:
; [61]     Write(Temp^.Value, ', ');
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                call    __putn
                ld      hl,string92
                call    __puts
; [62]     Temp := Temp ^.Next;
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,4            ; Literal 4
                pop     hl
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
; [63]   until Temp = Node;
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_eq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,repeat90
break91:
; [64] 
; [65]   WriteLn;
                call    __newline
; [66] end;
exit89:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [67]         
; [68] procedure Part1;
; 
; [69] var
; [70]   T: Text;
; [71]   S: String;
; [72]   I, J, Err, Zero, Sum: Integer;
; [73]   Node: PNode;
; [74] begin
; var T(-167), S(-423), I(-425), J(-427), Err(-429), Zero(-431), Sum(-433), Node(-435)
; 
proc93:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-435
                add     hl,sp
                ld      sp,hl
; [75]   Assign(T, 'INPUT   .TXT');
                ld      de,ix
                ld      hl,-167
                add     hl,de
                push    hl
                ld      hl,string71
                call    __loadstr
                call    proc29
; Cleanup 2 bytes
                pop     hl
; Cleanup 256 bytes
                ld      hl,256          ; Clear
                add     hl,sp
                ld      sp,hl
; [76]   Reset(T);
                ld      de,ix
                ld      hl,-167
                add     hl,de
                push    hl
                call    proc37
; Cleanup 2 bytes
                pop     hl
; [77] 
; [78]   Count := 0;
                ld      hl,global73     ; Get global Count
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
; [79] 
; [80]   while not IsEof(T) do
while95:
                push    hl
                ld      de,ix
                ld      hl,-167
                add     hl,de
                push    hl
                call    func65
; Cleanup 2 bytes
                pop     hl
                pop     hl              ; Not
                ld      a,1
                xor     l
                ld      l,a
                push    hl
; [81]   begin
                pop     hl
                bit     0,l
                jp      z,false96
; [82]     ReadLine(T, S);
                ld      de,ix
                ld      hl,-167
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-423
                add     hl,de
                push    hl
                call    proc47
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
; [83]     (* WriteLn(Count, ' ', S); *)
; [84]     Val(S, I, Err);
                ld      de,ix
                ld      hl,-423
                add     hl,de
                call    __loadstr
                ld      de,ix
                ld      hl,-425
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-429
                add     hl,de
                push    hl
                call    __val_int
; Cleanup 256 bytes
                ld      hl,256          ; Clear
                add     hl,sp
                ld      sp,hl
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
; [85]     Nodes[Count].Value := I;
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
; [86]     if I = 0 then Zero := Count;
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                call    __int16_eq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,false97
                ld      de,ix
                ld      hl,-431
                add     hl,de
                push    hl
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                pop     hl
                ld      (hl),de
false97:
; [87]     Count := Count + 1;
                ld      hl,global73     ; Get global Count
                push    hl
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
; [88]   end;
                jp      while95
false96:
; [89] 
; [90]   Close(T);
                ld      de,ix
                ld      hl,-167
                add     hl,de
                push    hl
                call    proc68
; Cleanup 2 bytes
                pop     hl
; [91] 
; [92]   WriteLn('Read ', Count , ' numbers.');
                ld      hl,string98
                call    __puts
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                ld      hl,de
                call    __putn
                ld      hl,string99
                call    __puts
                call    __newline
; [93] 
; [94]   for I := 0 to Count - 2 do
                ld      de,ix
                ld      hl,-425
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,2            ; Literal 2
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                push    de
                push    de
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak101
forloop100:
; [95]   begin
; [96]     Nodes[I].Next := Ptr(Addr(Nodes[I + 1]));
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,4            ; Literal 4
                pop     hl
                add     hl,de
                push    hl
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                add     hl,de
                push    hl
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
; [97]     Nodes[I + 1].Prev:= Ptr(Addr(Nodes[I]));
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                add     hl,de
                push    hl
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,2            ; Literal 2
                pop     hl
                add     hl,de
                push    hl
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
; [98]   end;
fornext102:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak101
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop100
forbreak101:    pop     de              ; Cleanup limit
; [99] 
; [100]   Nodes[Count - 1].Next := Ptr(Addr(Nodes[0]));
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                push    hl
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,4            ; Literal 4
                pop     hl
                add     hl,de
                push    hl
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      de,0            ; Literal 0
                push    de
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
; [101]   Nodes[0].Prev := Ptr(Addr(Nodes[Count - 1]));
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      de,0            ; Literal 0
                push    de
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,2            ; Literal 2
                pop     hl
                add     hl,de
                push    hl
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                push    hl
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
; [102] 
; [103] (*  Dump(Ptr(Addr(Nodes[0]))); *)
; [104] 
; [105]   for I := 0 to Count - 1 do
                ld      de,ix
                ld      hl,-425
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                push    de
                push    de
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak104
forloop103:
; [106]   begin
; [107]     Mix(Ptr(Addr(Nodes[I])));
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                call    proc77
; Cleanup 2 bytes
                pop     hl
; [108] (*    Dump(Ptr(Addr(Nodes[I]))); *)
; [109]     WriteLn('Mixing: ', I:4);
                ld      hl,string106
                call    __puts
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,4            ; Literal 4
                ld      bc,de
                pop     hl
                call    __putn_fmt
                call    __newline
; [110]     Write(#27'A');
                ld      hl,string107
                call    __puts
; [111]   end;
fornext105:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak104
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop103
forbreak104:    pop     de              ; Cleanup limit
; [112]   
; [113]   WriteLn;
                call    __newline
; [114] 
; [115]   Sum := 0;
                ld      de,ix
                ld      hl,-433
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
; [116] 
; [117]   Node := Ptr(Addr(Nodes[Zero]));
                ld      de,ix
                ld      hl,-435
                add     hl,de
                push    hl
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      de,ix
                ld      hl,-431
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
; [118]   for I := 1 to 3 do
                ld      de,ix
                ld      hl,-425
                add     hl,de
                push    hl
                ld      de,1            ; Literal 1
                pop     hl
                ld      (hl),de
                ld      de,3            ; Literal 3
                push    de
                push    de
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak109
forloop108:
; [119]   begin
; [120]     for J := 1 to 1000 mod Count do Node := Node^.Next;
                ld      de,ix
                ld      hl,-427
                add     hl,de
                push    hl
                ld      de,1            ; Literal 1
                pop     hl
                ld      (hl),de
                ld      de,1000         ; Literal 1000
                push    de
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                pop     hl
                call    __sdiv16        ; Mod
                ex      hl,de
                ld      de,hl
                push    de
                push    de
                ld      de,ix
                ld      hl,-427
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak112
forloop111:
                ld      de,ix
                ld      hl,-435
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-435
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,4            ; Literal 4
                pop     hl
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
fornext113:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-427
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak112
                ld      de,ix
                ld      hl,-427
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop111
forbreak112:    pop     de              ; Cleanup limit
; [121]     WriteLn(1000 * I, 'th number is ', Node^.Value);
                ld      de,1000         ; Literal 1000
                push    de
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __mul16         ; Mul
                call    __putn
                ld      hl,string114
                call    __puts
                ld      de,ix
                ld      hl,-435
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                call    __putn
                call    __newline
; [122]     Sum := Sum + Node^.Value;
                ld      de,ix
                ld      hl,-433
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-433
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,-435
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
; [123]   end;
fornext110:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak109
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop108
forbreak109:    pop     de              ; Cleanup limit
; [124] 
; [125]   WriteLn('Sum is ', Sum);
                ld      hl,string115
                call    __puts
                ld      de,ix
                ld      hl,-433
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                call    __putn
                call    __newline
; [126] 
; [127] end;
exit94:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [128] 
; [129] procedure Part2;
; 
; [130] var
; [131]   T: Text;
; [132]   S: String;
; [133]   I, J, Err, Zero, I1, I2, I3: Integer;
; [134]   Node, K1, K2, K3: PNode;
; [135]   R, Sum: Real;
; [136] begin
; var T(-167), S(-423), I(-425), J(-427), Err(-429), Zero(-431), I1(-433), I2(-435), I3(-437), Node(-439), K1(-441), K2(-443), K3(-445), R(-451), Sum(-457)
; 
proc116:        push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-457
                add     hl,sp
                ld      sp,hl
; [137]   Assign(T, 'INPUT   .TXT');
                ld      de,ix
                ld      hl,-167
                add     hl,de
                push    hl
                ld      hl,string71
                call    __loadstr
                call    proc29
; Cleanup 2 bytes
                pop     hl
; Cleanup 256 bytes
                ld      hl,256          ; Clear
                add     hl,sp
                ld      sp,hl
; [138]   Reset(T);
                ld      de,ix
                ld      hl,-167
                add     hl,de
                push    hl
                call    proc37
; Cleanup 2 bytes
                pop     hl
; [139] 
; [140]   Count := 0;
                ld      hl,global73     ; Get global Count
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
; [141] 
; [142]   while not IsEof(T) do
while118:
                push    hl
                ld      de,ix
                ld      hl,-167
                add     hl,de
                push    hl
                call    func65
; Cleanup 2 bytes
                pop     hl
                pop     hl              ; Not
                ld      a,1
                xor     l
                ld      l,a
                push    hl
; [143]   begin
                pop     hl
                bit     0,l
                jp      z,false119
; [144]     ReadLine(T, S);
                ld      de,ix
                ld      hl,-167
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-423
                add     hl,de
                push    hl
                call    proc47
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
; [145]     (* WriteLn(Count, ' ', S); *)
; [146]     Val(S, I, Err);
                ld      de,ix
                ld      hl,-423
                add     hl,de
                call    __loadstr
                ld      de,ix
                ld      hl,-425
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-429
                add     hl,de
                push    hl
                call    __val_int
; Cleanup 256 bytes
                ld      hl,256          ; Clear
                add     hl,sp
                ld      sp,hl
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
; [147]     Nodes[Count].Value := I;
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
; [148]     if I = 0 then Zero := Count;
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                call    __int16_eq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,false120
                ld      de,ix
                ld      hl,-431
                add     hl,de
                push    hl
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                pop     hl
                ld      (hl),de
false120:
; [149]     Count := Count + 1;
                ld      hl,global73     ; Get global Count
                push    hl
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
; [150]   end;
                jp      while118
false119:
; [151] 
; [152]   Close(T);
                ld      de,ix
                ld      hl,-167
                add     hl,de
                push    hl
                call    proc68
; Cleanup 2 bytes
                pop     hl
; [153] 
; [154]   WriteLn('Read ', Count , ' numbers.');
                ld      hl,string98
                call    __puts
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                ld      hl,de
                call    __putn
                ld      hl,string99
                call    __puts
                call    __newline
; [155] 
; [156]   for I := 0 to Count - 2 do
                ld      de,ix
                ld      hl,-425
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,2            ; Literal 2
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                push    de
                push    de
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak122
forloop121:
; [157]   begin
; [158]     Nodes[I].Next := Ptr(Addr(Nodes[I + 1]));
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,4            ; Literal 4
                pop     hl
                add     hl,de
                push    hl
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                add     hl,de
                push    hl
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
; [159]     Nodes[I + 1].Prev:= Ptr(Addr(Nodes[I]));
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                add     hl,de
                push    hl
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,2            ; Literal 2
                pop     hl
                add     hl,de
                push    hl
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
; [160]   end;
fornext123:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak122
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop121
forbreak122:    pop     de              ; Cleanup limit
; [161] 
; [162]   Nodes[Count - 1].Next := Ptr(Addr(Nodes[0]));
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                push    hl
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,4            ; Literal 4
                pop     hl
                add     hl,de
                push    hl
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      de,0            ; Literal 0
                push    de
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
; [163]   Nodes[0].Prev := Ptr(Addr(Nodes[Count - 1]));
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      de,0            ; Literal 0
                push    de
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,2            ; Literal 2
                pop     hl
                add     hl,de
                push    hl
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                push    hl
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
; [164] 
; [165]   for I := 0 to Count - 1 do
                ld      de,ix
                ld      hl,-425
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                push    de
                push    de
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak125
forloop124:
; [166]   begin
; [167]     R := (811589153.0 mod (Count - 1)) * (Nodes[I].Value mod (Count - 1)) mod (Count - 1);
                ld      de,ix
                ld      hl,-451
                add     hl,de
                push    hl
                constfp string127
                pushfp
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                call    FLOAT
                exx
                popfp
                call    MOD
                pushfp
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                push    de
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                pop     hl
                call    __sdiv16        ; Mod
                ex      hl,de
                push    hl
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                pop     hl
                call    __sdiv16        ; Mod
                ex      hl,de
                call    FLOAT
                exx
                popfp
                call    FPMUL
                exx
                pop     hl
                call    __storefp
; [168]     Nodes[I].Value := Fix(R);
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-451
                add     hl,de
                call    __loadfp
                call    FIX
                ld      de,hl
                pop     hl
                ld      (hl),de
; [169]   end;
fornext126:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak125
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop124
forbreak125:    pop     de              ; Cleanup limit
; [170] 
; [171] (*  Dump(Ptr(Addr(Nodes[0]))); *)
; [172] 
; [173]   for I := 0 to 9 do
                ld      de,ix
                ld      hl,-425
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
                ld      de,9            ; Literal 9
                push    de
                push    de
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak129
forloop128:
; [174]   begin
; [175]     WriteLn('Round ', I);
                ld      hl,string131
                call    __puts
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                call    __putn
                call    __newline
; [176]     WriteLn;
                call    __newline
; [177]     for J := 0 to Count - 1 do
                ld      de,ix
                ld      hl,-427
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                push    de
                push    de
                ld      de,ix
                ld      hl,-427
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak133
forloop132:
; [178]     begin
; [179]       Mix(Ptr(Addr(Nodes[J])));
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      de,ix
                ld      hl,-427
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                call    proc77
; Cleanup 2 bytes
                pop     hl
; [180]   (*    Dump(Ptr(Addr(Nodes[J]))); *)
; [181]       WriteLn(#27'AMixing: ', J:4);
                ld      hl,string135
                call    __puts
                ld      de,ix
                ld      hl,-427
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,4            ; Literal 4
                ld      bc,de
                pop     hl
                call    __putn_fmt
                call    __newline
; [182]     end;
fornext134:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-427
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak133
                ld      de,ix
                ld      hl,-427
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop132
forbreak133:    pop     de              ; Cleanup limit
; [183]   end;
fornext130:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak129
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop128
forbreak129:    pop     de              ; Cleanup limit
; [184]   
; [185]   WriteLn;
                call    __newline
; [186] 
; [187]   Sum := 0;
                ld      de,ix
                ld      hl,-457
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                ld      hl,de
                call    FLOAT
                exx
                pop     hl
                call    __storefp
; [188] 
; [189]   K1 := Ptr(Addr(Nodes[Zero]));
                ld      de,ix
                ld      hl,-441
                add     hl,de
                push    hl
                ld      hl,global72     ; Get global Nodes
                push    hl
                ld      de,ix
                ld      hl,-431
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,6            ; Literal 6
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
; [190]   for I := 0 to 999 do K1 := K1^.Next;    
                ld      de,ix
                ld      hl,-425
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
                ld      de,999          ; Literal 999
                push    de
                push    de
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak137
forloop136:
                ld      de,ix
                ld      hl,-441
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-441
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,4            ; Literal 4
                pop     hl
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
fornext138:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak137
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop136
forbreak137:    pop     de              ; Cleanup limit
; [191] 
; [192]   K2 := K1;
                ld      de,ix
                ld      hl,-443
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-441
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
; [193]   for I := 0 to 999 do K2 := K2^.Next;
                ld      de,ix
                ld      hl,-425
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
                ld      de,999          ; Literal 999
                push    de
                push    de
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak140
forloop139:
                ld      de,ix
                ld      hl,-443
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-443
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,4            ; Literal 4
                pop     hl
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
fornext141:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak140
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop139
forbreak140:    pop     de              ; Cleanup limit
; [194] 
; [195]   K3:= K2;
                ld      de,ix
                ld      hl,-445
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-443
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
; [196]   for I := 0 to 999 do K3 := K3^.Next;
                ld      de,ix
                ld      hl,-425
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
                ld      de,999          ; Literal 999
                push    de
                push    de
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak143
forloop142:
                ld      de,ix
                ld      hl,-445
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-445
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,4            ; Literal 4
                pop     hl
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
fornext144:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak143
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop142
forbreak143:    pop     de              ; Cleanup limit
; [197] 
; [198]   I1 := (Addr(K1^) - Addr(Nodes)) / 6;
                ld      de,ix
                ld      hl,-433
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-441
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      hl,global72     ; Get global Nodes
                ld      de,hl
                pop     hl
                xor     a
                sbc     hl,de
                push    hl
                ld      de,6            ; Literal 6
                pop     hl
                call    __sdiv16        ; Div
                ld      de,hl
                pop     hl
                ld      (hl),de
; [199]   I2 := (Addr(K2^) - Addr(Nodes)) / 6;
                ld      de,ix
                ld      hl,-435
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-443
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      hl,global72     ; Get global Nodes
                ld      de,hl
                pop     hl
                xor     a
                sbc     hl,de
                push    hl
                ld      de,6            ; Literal 6
                pop     hl
                call    __sdiv16        ; Div
                ld      de,hl
                pop     hl
                ld      (hl),de
; [200]   I3 := (Addr(K3^) - Addr(Nodes)) / 6;
                ld      de,ix
                ld      hl,-437
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-445
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      hl,global72     ; Get global Nodes
                ld      de,hl
                pop     hl
                xor     a
                sbc     hl,de
                push    hl
                ld      de,6            ; Literal 6
                pop     hl
                call    __sdiv16        ; Div
                ld      de,hl
                pop     hl
                ld      (hl),de
; [201] 
; [202] (*  Assign(T, FileName); *)
; [203]   Reset(T);
                ld      de,ix
                ld      hl,-167
                add     hl,de
                push    hl
                call    proc37
; Cleanup 2 bytes
                pop     hl
; [204] 
; [205]   Count := 0;
                ld      hl,global73     ; Get global Count
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
; [206] 
; [207]   R := 1;
                ld      de,ix
                ld      hl,-451
                add     hl,de
                push    hl
                ld      de,1            ; Literal 1
                ld      hl,de
                call    FLOAT
                exx
                pop     hl
                call    __storefp
; [208] 
; [209]   while not IsEof(T) do
while145:
                push    hl
                ld      de,ix
                ld      hl,-167
                add     hl,de
                push    hl
                call    func65
; Cleanup 2 bytes
                pop     hl
                pop     hl              ; Not
                ld      a,1
                xor     l
                ld      l,a
                push    hl
; [210]   begin
                pop     hl
                bit     0,l
                jp      z,false146
; [211]     ReadLine(T, S);
                ld      de,ix
                ld      hl,-167
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-423
                add     hl,de
                push    hl
                call    proc47
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
; [212]     (* WriteLn(Count, ' ', S); *)
; [213]     Val(S, I, Err);
                ld      de,ix
                ld      hl,-423
                add     hl,de
                call    __loadstr
                ld      de,ix
                ld      hl,-425
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-429
                add     hl,de
                push    hl
                call    __val_int
; Cleanup 256 bytes
                ld      hl,256          ; Clear
                add     hl,sp
                ld      sp,hl
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
; [214] 
; [215]     if (Count = I1) or (Count = I2) or (Count = I3) then
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,-433
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_eq
                ld      h,0
                ld      l,a
                push    hl
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,-435
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_eq
                ld      h,0
                ld      l,a
                ld      de,hl
                pop     hl
                ld      a,l
                or      e
                ld      l,a
                push    hl
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,-437
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_eq
                ld      h,0
                ld      l,a
                ld      de,hl
                pop     hl
                ld      a,l
                or      e
                ld      l,a
                push    hl
; [216]     begin
                pop     hl
                bit     0,l
                jp      z,false147
; [217]       R := 811589153.0 * I;
                ld      de,ix
                ld      hl,-451
                add     hl,de
                push    hl
                constfp string127
                pushfp
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                call    FLOAT
                exx
                popfp
                call    FPMUL
                exx
                pop     hl
                call    __storefp
; [218]       WriteLn(Count, 'th number is ', I: 5, ' ', R:15:0);
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                ld      hl,de
                call    __putn
                ld      hl,string114
                call    __puts
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,5            ; Literal 5
                ld      bc,de
                pop     hl
                call    __putn_fmt
                ld      de,32           ; Literal 32
                ld      hl,de
                ld      a,l
                call    __putc
                ld      de,ix
                ld      hl,-451
                add     hl,de
                call    __loadfp
                pushfp
                ld      de,15           ; Literal 15
                push    de
                ld      de,0            ; Literal 0
                ld      bc,de
                pop     de
                exx
                popfp
                call    __putf_fix
                call    __newline
; [219]       Sum := Sum + R;
                ld      de,ix
                ld      hl,-457
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-457
                add     hl,de
                call    __loadfp
                pushfp
                ld      de,ix
                ld      hl,-451
                add     hl,de
                call    __loadfp
                exx
                popfp
                call    FPADD
                exx
                pop     hl
                call    __storefp
; [220]     end;
false147:
; [221] 
; [222]     Count := Count + 1;
                ld      hl,global73     ; Get global Count
                push    hl
                ld      hl,global73     ; Get global Count
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
; [223]   end;
                jp      while145
false146:
; [224] 
; [225]   Close(T);
                ld      de,ix
                ld      hl,-167
                add     hl,de
                push    hl
                call    proc68
; Cleanup 2 bytes
                pop     hl
; [226] 
; [227]   WriteLn('Sum is ', Sum:15:0);
                ld      hl,string115
                call    __puts
                ld      de,ix
                ld      hl,-457
                add     hl,de
                call    __loadfp
                pushfp
                ld      de,15           ; Literal 15
                push    de
                ld      de,0            ; Literal 0
                ld      bc,de
                pop     de
                exx
                popfp
                call    __putf_fix
                call    __newline
; [228] end;
exit117:        ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [229] 
; [230] begin
; 
; var Mem(0), HeapPtr(0), AssertPassed(0), AssertFailed(0), Nodes(0), Count(0)
; 
main:           call    __init
                ld      ix,0
                add     ix,sp
; [231]   WriteLn;
                call    __newline
; [232]   WriteLn('*** AoC 2022.20 Grove Positioning System ***');
                ld      hl,string149
                call    __puts
                call    __newline
; [233]   WriteLn;
                call    __newline
; [234] 
; [235]   (* Part1; *)
; [236]   Part2;
                call    proc116
; [237] end.
exit148:        call    __done
                ret
; 
string49:       db      0
; 
string71:       db      12,"INPUT   .TXT"
; 
string92:       db      2,", "
; 
string98:       db      5,"Read "
; 
string99:       db      9," numbers."
; 
string106:      db      8,"Mixing: "
; 
string107:      db      2,27,"A"
; 
string114:      db      13,"th number is "
; 
string115:      db      7,"Sum is "
; 
string127:      db      12,"811589153.0 "
; 
string131:      db      6,"Round "
; 
string135:      db      10,27,"AMixing: "
; 
string149:      db      44,"*** AoC 2022.20 Grove Positioning System ***"
; 
display:        ds      32              ; Display
; 
eof:                                    ; End of file
; 
; HEAP:
; 
; end
; 
