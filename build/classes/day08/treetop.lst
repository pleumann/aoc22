; --------------------------------------
; zasm: assemble "treetop.z80"
; date: 2023-01-20 17:38:39
; --------------------------------------


; 
; program treetop.pas
; 
CPM:            equ     1               ; Target is CP/M .com file
; 
                include "/Users/joerg/Projekte/pl0/pl0.z80"
;
; PL0 built-in assembler functions
;

#if defined(CPM)
                org     $100
#endif

#if defined(NXT)
                org     $2000
#endif

                jp      main

;
; Some stuff shared between the routines
;
#if defined(CPM)
__buffer:       ds      32
#endif

#if defined(NXT)
__saved_iy:     dw      0
__win_handle:   dw      0
__buffer:       equ     23698
#endif

;
; Boolean literals
;
__boolean1:     db      4,"True"
__boolean0:     db      5,"False"
__boolean_enum: dw __boolean0, __boolean1

;
; Signed 16 bit '=' check (with help from Ped7g)
;
; In:   HL (left), DE (right)
; Out:  A=0 if false, A=1 if true
;
__int16_eq:     xor a
                sbc hl,de
                ; add hl,de
                ret nz
                inc a
                ret

;
; Signed 16 bit '<>' check (with help from Ped7g)
;
; In:   HL (left), DE (right)
; Out:  A=0 if false, A=1 if true
;
__int16_neq:    xor a
                sbc hl,de
                ; add hl,de
                ret z
                inc a
                ret

;
; Signed 16 bit 'lt' check (with help from Ped7g)
;
; In:   HL (left), DE (right)
; Out:  A=0 if false, A=1 if true
;
__int16_lt:     xor a
                sbc hl,de
                ; add hl,de
                jp pe,__int16_lt_of
                ret p
                inc a
                ret
__int16_lt_of:  ret m
                inc a
                ret

;
; Signed 16 bit '>=' check (with help from Ped7g)
;
; In:   HL (left), DE (right)
; Out:  A=0 if false, A=1 if true
;
__int16_geq:    xor a
                sbc hl,de
                ; add hl,de
                jp pe,__int16_geq_of
                ret m
                inc a
                ret
__int16_geq_of: ret p
                inc a
                ret

; Signed bc <= de <= hl check

__int16_case:   push    de
                call    __int16_geq
                pop     hl
                and     a
                ret     z
                push    hl
                ld      de,bc
                call    __int16_geq
                pop     de
                and     a
                ret     z
                inc     a
                ret

;
; Signed 16 bit multiplication (taken from Leventhal/Saville)
;
; Entry:  HL (multiplicand), DE (multiplier)
; Exit:   HL (product)
; Uses:   AF, BC
;
__mul16:        ld      c,l
                ld      b,h
                ld      hl,0
                ld      a,15
__mul16a:       sla     e
                rl      d
                jr      nc,__mul16b
                add     hl,bc
__mul16b:       add     hl,hl
                dec     a
                jr      nz,__mul16a
                or      d
                ret     p
                add     hl,bc
                ret

;
; Signed 16 bit division (taken from Leventhal/Saville)
;
; Entry:  HL (dividend), DE (divisior)
; Exit:   HL (quotient), DE (remainder), CF (div-by-zero)
; Uses:   AF, BC
;
__sdiv16:       ld      a,h
                ld      (__srem),a
                xor     d
                ld      (__squot),a
                ld      a,d
                or      a
                jp      p,__chkde
                sub     a
                sub     e
                ld      e,a
                sbc     a,a
                sub     d
                ld      d,a
__chkde:        ld      a,h
                or      a
                jp      p,__dodiv
                sub     a
                sub     l
                ld      l,a
                sbc     a,a
                sub     h
                ld      h,a
__dodiv:        call    __udiv16
                ret     c
                ld      a,(__squot)
                or      a
                jp      p,__dorem
                sub     a
                sub     l
                ld      l,a
                sbc     a,a
                sub     h
                ld      h,a
__dorem:        ld      a,(__srem)
                or      a
                ret     p
                sub     a
                sub     e
                ld      e,a
                sbc     a,a
                sub     d
                ld      d,a
                ret
__udiv16:       ld      a,e
                or      d
                jr      nz,__divide
                ld      hl,0
                ld      d,h
                ld      e,l
                scf
                ret
__divide:       ld      c,l
                ld      a,h
                ld      hl,0
                ld      b,16
                or      a
__dvloop:       rl      c
                rla
                rl      l
                rl      h
                push    hl
                sbc     hl,de
                ccf
                jr      c,__drop
                ex      (sp),hl
__drop:         inc     sp
                inc     sp
                djnz    __dvloop
                ex      de,hl
                rl      c
                ld      l,c
                rla
                ld      h,a
                or      a
                ret

__squot:        ds      1
__srem:         ds      1
__count:        ds      1

;
; Multiplication by 10
;
; Entry:  HL (multiplicand)
; Exit:   HL (product)
; Uses:   DE
;
__mul10:    
                ex      hl,de
                add     hl,hl
                ld      de,hl
                add     hl,hl
                add     hl,hl
                add     hl,de
                ex      hl,de
                ret

;
; Division by 10 (taken from Z80 Heaven)
;
; Entry:  HL (dividend)
; Exit:   HL (quotient), A (remainder)
; Uses:   AF, BC
;
__div10:    
                ld      bc,$0D0A
                xor     a
                add     hl,hl
                rla
                add     hl,hl
                rla
                add     hl,hl
                rla
__div10a:       add     hl,hl
                rla
                cp      c
                jr c,   __div10b
                sub c
                inc l
__div10b:       djnz __div10a
                ret

; Fallthrough intended
__abs16:
                bit     7,h
                ret     z

; Negation from Z80 Heaven
__neg16:
                xor     a
                sub     l
                ld      l,a
                sbc     a,a
                sub     h
                ld      h,a
                ret

;
;
;
;

__random:
    ; ex hl,de
    call __rand16
    call __sdiv16
    ex hl,de
    ret
    
;#define smc    ;uncomment if you are using SMC
__rand16:
;;collaboration by Zeda with Runer112
;;160cc or 148cc if using SMC
;;26 bytes
;;cycle: 4,294,901,760 (almost 4.3 billion)
#if defined(smc)
seed1=$+1
    ld hl,9999
#else
    ld hl,(seed1)
#endif
    ld b,h
    ld c,l
    add hl,hl
    add hl,hl
    inc l
    add hl,bc
    ld (seed1),hl
#if defined(smc)
seed2=$+1
    ld hl,9999
#else
    ld hl,(seed2)
#endif
    add hl,hl
    sbc a,a
    and %00101101
    xor l
    ld l,a
    ld (seed2),hl
    add hl,bc
    res 7,h
    ret
seed1:              dw 1234
seed2:              dw 5678

; String Compare Leventhal Saville P.290
;
; HL string 1
; DE string 2
; Result: Z=1, C=0 1<2
; Z =0, C=0 1>2
; Z=0, C=1 1<2


__strcmp:
        ld      a,(hl)
        ld      (__lens1),a
        ld      a,(de)
        ld      (__lens2),a
        cp      (hl)
        jr      c,__begcmp
        ld      a,(hl)
__begcmp:
        or      a
        jr      z,__cmplen
        ld      b,a
        ex      de,hl
__cmplp:
        inc     hl
        inc     de
        ld      a,(de)
        cp      (hl)
        ret     nz
        djnz    __cmplp
__cmplen:
        ld      a,(__lens1)
        ld      hl,__lens2
        cp      (hl)
        ret
__lens1:
        ds      1
__lens2:
        ds      1

; String concatenate
; HL = String 1, DE = String 2, B = max len, CF=1 if shortened
__strcat:
        ld      (__s1adr),hl
        push    bc
        ld      a,(hl)
        ld      (__s1len),a
        ld      c,a
        ld      b,0
        add     hl,bc
        inc     hl
        ld      a,(de)
        ld      (__s2len),A
        inc     de
        pop     bc
        ld      c,a
        ld      a,(__s1len)
        add     a,c
        jr      c,__toolng
        cp      b
        jr      z,__lenok
        jr      c,__lenok
__toolng:
        ld      a,255
        ld      (__strgov),a
        ld      a,(__s1len)
        ld      c,a
        ld      a,b
        sub     c
        ret     c
        ld      (__s2len),a
        ld      a,b
        ld      (__s1len),a
        jr      __docat
__lenok:
        ld      (__s1len),a
        sub     a
        ld      (__strgov),a
__docat:
        ld      a,(__s2len)
        or      a
        jr      z,__exit
        ld      c,a
        ld      b,0
        ex      de,hl
        ldir
__exit:
        ld      a,(__s1len)
        ld      hl,(__s1adr)
        ld      (hl),a
        ld      a,(__strgov)
        rra
        ret
__s1adr:
        ds      2
__s1len:
        ds      1
__s2len:
        ds      1
__strgov:
        ds      1

; String pos
__strpos:
        ld      (__string),hl
        ex      de,hl
        ld      a,(hl)
        or      a
        jr      z,__notfnd
        inc     hl
        ld      (__substg),hl
        ld      (__sublen),a
        ld      c,a
        ld      a,(de)
        or      a
        jr      z,__notfnd
        sub     c
        jr      c,__notfnd
        inc     a
        ld      b,a
        sub     a
        ld      (__index),a
__slp1:
        ld      hl,__index
        inc     (hl)
        ld      hl,__sublen
        ld      c,(hl)
        ld      hl,(__string)
        inc     hl
        ld      (__string),hl
        ld      de,(__substg)
__cmplp2:
        ld      a,(de)
        cp      (hl)
        jr      nz,__slp2
        dec     c
        jr      z,__found
        inc     hl
        inc     de
        jr      __cmplp2
__slp2:
        djnz    __slp1
        jr      __notfnd
__found:
        ld      a,(__index)
        ret
__notfnd:
        sub     a
        ret
__string:
        ds      2
__substg:
        ds      2
__slen:
        ds      1
__sublen:
        ds      1
__index:
        ds      1


; strcpy
__strcpy:
        ld      (__maxlen),a
        sub     a
        ld      (de),a
        ld      (__cpyerr),a
        or      b
        ret     z
        ld      a,(__maxlen)
        or      a
        jr      z,__erexit
        ld      a,c
        or      a
        jr      z,__erexit
        ld      a,(hl)
        cp      c
        ret     c
        ld      a,c
        add     a,b
        jr      c,__recalc
        dec     a
        cp      (hl)
        jr      c,__cnt1ok
        jr      z,__cnt1ok
__recalc:
        ld      a,255
        ld      (__cpyerr),a
        ld      a,(hl)
        sub     c
        inc     a
        ld      b,a
__cnt1ok:
        ld      a,(__maxlen)
        cp      b
        jr      nc,__cnt2ok
        ld      b,a
        ld      a,255
        ld      (__cpyerr),a
__cnt2ok:
        ld      a,b
        or      a
        jr      z,__erexit
        ld      b,0
        add     hl,bc
        ld      (de),a
        ld      c,a
        inc     de
        ldir
        ld      a,(__cpyerr)
__okexit:
        or      a
        ret     z
__erexit:
        scf
        ret
__maxlen:
        ds      1
__cpyerr:
        ds      1

;Insert
__strins:
        sub     a
        ld      (__inserr),a
        ld      a,(de)
        or      a
        ret     z
__idx0:
        ld      a,c
        or      a
        scf
        ret     z
__chklen:
        ld      a,(de)
        add     a,(hl)
        jr      c,__trunc
        cp      b
        ld      a,(de)
        jr      c,__idxlen
        jr      z,__idxlen
__trunc:
        ld      a,255
        ld      (__inserr),a
        ld      a,b
        sub     (hl)
        ret     c
        scf
        ret     z
__idxlen:
        ld      b,a
        ld      a,(hl)
        cp      c
        jr      nc,__lenok2
        ld      c,a
        add     a,b
        ld      (hl),a
        ex      de,hl
        ld      a,c
        inc     a
        add     a,e
        ld      e,a
        jr      nc,__idxl1
        inc     d
__idxl1:
        ld      a,255
        ld      (__inserr),a
        jr      __mvesub
__lenok2:
        push    bc
        push    de
        ld      e,a
        ld      d,0
        add     a,b
        ld      (hl),a
        ld      a,e
        sub     c
        inc     a
        add     hl,de
        ld      e,l
        ld      d,h
        ld      c,b
        ld      b,0
        add     hl,bc
        ex      de,hl
        ld      c,a
        lddr
        ex      de,hl
        inc     de
        pop     hl
        pop     bc
__mvesub:
        inc     hl
        ld      c,b
        ld      b,0
        ldir
        ld      a,(__inserr)
        rra
        ret
__inserr:
        ds      1

; Delete
__strdel:
        sub     a
        ld      (__delerr),a
        or      b
        ret     z
        ld      a,c
        or      a
        scf
        ret     z
        ld      a,(hl)
        cp      c
        ret     c
        ld      a,c
        add     a,b
        jr      c,__trunc2
        ld      e,a
        dec     a
        cp      (hl)
        jr      c,__cntok
        jr      z,__trunc2
        ld      a,255
        ld      (__delerr),a
__trunc2:
        ld      a,c
        dec     a
        ld      (hl),a
        ld      a,(__delerr)
        rra
        ret
__cntok:
        ld      a,(hl)
        ld      d,a
        sub     b
        ld      (hl),a
        ld      a,d
        sub     e
        inc     a
        push    hl
        ld      b,0
        add     hl,bc
        ex      (sp),hl
        ld      d,0
        add     hl,de
        pop     de
        ld      c,a
        ldir
__okexit2:
        or      a
        ret
__delerr:
        ds      1        
;
; String "equal" check. Arguments and result on stack.
;
; Entry:    -
; Exit:     -
; Uses:     HL,DE,BC,AF
;
__streq:
        ld      hl,258
        add     hl,sp
        ld      de,hl
        dec     h
        ld      a,(de)
        cp      (hl)
        jr      nz,__streq0     ; Fast track if lengths differ
        call    __strcmp
        jr      z,__streq1
__streq0:
        ld      de,0

;        ld      (hl),de
        ret
__streq1:
        ld      de,1
;        ld      (hl),de
;        ld      a,1
        ret

;
; String "less than" check. Arguments and result on stack.
;
; Entry:    -
; Exit:     -
; Uses:     HL,DE,BC,AF
;
__strlt:
        ld      hl,258
        add     hl,sp
        ld      de,hl
        dec     d
        call    __strcmp
        jr      c,__strlt1
__strlt0:
;        ld      a,0
        ld      de,0
;        ld      (hl),de
        ret
__strlt1:
        ld      de,1
;        ld      (hl),de
;        ld      a,1
        ret

;
; String "less than or equal" check. Arguments and result on stack.
;
; Entry:    -
; Exit:     -
; Uses:     HL,DE,BC,AF
;
__strleq:
        ld      hl,258
        add     hl,sp
        ld      de,hl
        dec     d
        call    __strcmp
        jr      z,__strleq1
        jr      c,__strleq1
__strleq0:
        ld      de,0
;        ld      (hl),de
;        ld      a,0
        ret
__strleq1:
        ld      de,1
;        ld      (hl),de
;        ld      a,1
        ret

; Concat
__concat:
        ld      hl,514
        add     hl,sp
        ld      (hl),0
        ld      de,hl
        dec     d
        push    hl
        push    de
        ld      b,255
        call    __strcat
        pop     de
        dec     d
        pop     hl
        ld      b,255
        call    __strcat
        ret

; Concat
__stradd:
        ld      hl,258
        add     hl,sp
        ld      de,hl
        dec     d
        ld      b,255
        call    __strcat
        ret

__pos:
        ld      hl,514
        add     hl,sp
        push    hl
        dec     h
        ld      de,hl
        dec     d
        ex      de,hl
        call    __strpos
        pop     hl
        ld      (hl),a
        inc     hl
        ld      (hl),0
        ret

__copy:
        ld      hl,2
        add     hl,sp
        ld      b,(hl)
        inc     hl
        inc     hl
        ld      c,(hl)
        inc     hl
        inc     hl
        ld      de,hl
        inc     d
        ld      a,255
        call    __strcpy
        ret

__insert:
        ld      hl,2
        add     hl,sp
        ld      c,(hl)
        inc     hl
        inc     hl
        ld      a,(hl)
        inc     hl
        ld      de,hl
        ld      h,(hl)
        ld      l,a
        inc     de

        ld      b,255
        call    __strins
        ret

__delete:
        ld      hl,2
        add     hl,sp
        ld      b,(hl)
        inc     hl
        inc     hl
        ld      c,(hl)
        inc     hl
        inc     hl
        ld      a,(hl)
        inc     hl
        ld      h,(hl)
        ld      l,a
        call    __strdel
        ret

__str_int:
        ld      hl,2
        add     hl,sp
        ld      bc,(hl)
        inc     hl
        inc     hl
        ld      de,(hl)
        ld      hl,bc
        push    hl
        inc     hl
        call    __itoa
        pop     hl
        ld      (hl),a
        ret

__val_int:
        ld      hl,6
        add     hl,sp
        ld      a,(hl)
        inc     hl
        call    __atoi
        ld      hl,4        
        add     hl,sp
        ld      bc,(hl)
        ld      hl,bc
        ld      (hl),de
        pop     de
        ld      hl,260
        add     hl,sp
        ld      sp,hl
        push    de
        ret                     ; FIXME: Error reporting 

__val_float:
        ld      hl,6
        add     hl,sp
;        ld      a,(hl)
;        inc     hl
        call    __atof
        exx
        pop     de
        pop     bc
        pop     hl
        call    __storefp
        exx
        ld      hl,256
        add     hl,sp
        ld      sp,hl
        push    de
        ret                     ; FIXME: Error reporting 

;
; String length. Arguments and result on stack.
;
; Entry:    -
; Exit:     -
; Uses:     HL,DE
;
__length:
        ld      hl,2
        add     hl,sp
        ld      d,0
        ld      e,(hl)
        inc     h
        ld      (hl),de
        ret

;
; Load string from HL to stack, return properly.
;
__loadstr:
        pop     bc
        ex      de,hl
        ld      hl,-256
        add     hl,sp
        ld      sp,hl
        ex      de,hl
        push    bc
        ld      a,255
        call    __movestr
        ret

;
; Store string of max length A from stack to address, cleanup stack, return properly.
;
__storestr:
        ld      hl,258
        add     hl,sp
        ld      de,(hl)
        dec     h
        call    __movestr
        pop     bc
        ld      hl,258
        add     hl,sp
        ld      sp,hl
        push    bc
        ret

;
; Move string of max length A from HL to DE, bypassing the stack.
;
__movestr:
        ld      b,(hl)
        cp      b
        jp      c,__movestr_1
        ld      a,b
__movestr_1:
        ld      (de),a
        and     a
        ret     z
        inc     hl
        inc     de
        ld      b,0
        ld      c,a
        ldir
        ret

#include "math48.z80"
;       Math48 Floating Point Package
;       Version 1.1 Revision 1
;       by Anders Hejlsberg
;       2532 Bytes

;HOPTABEL

        JP   FPADD
        JP   FPSUB
        JP   FPMUL
        JP   FPDIV
        JP   MOD
        JP   PWR
        JP   CMP

        JP   SQR
        JP   LN
        JP   EXP
        JP   LOG
        JP   SIN
        JP   COS
        JP   TAN
        JP   ATN
        JP   ACPI
        JP   INT
        JP   FRAC

        JP   EQUAL
        JP   MUL10
        JP   FIX
        JP   FLOAT

        JP   FSTRS
        JP   FSTRR
        JP   CNVN


SIGN:   EQU  80H
EXPN:   EQU  80H

IWIDTH: EQU  0F0H
FWIDTH: EQU  0FH


;FLOATING POINT ADDITION.

FPADD:  EXX             ;Er AC negativ?
        BIT  7,B
        EXX
        JP   NZ,SUB1    ;Ja => SUB1

ADD1:   EXX             ;Er AC' nul?
        LD   A,L
        OR   A
        EXX
        RET  Z          ;Ja => Returner

        EXX             ;Gem AC'
        PUSH BC
        PUSH DE
        PUSH HL
        EXX

        LD   A,L        ;Er AC nul?
        OR   A
        JR   NZ,ADD2    ;Nej => ADD2
        EXX             ;Returner AC'
        RES  7,B        ;Positivt
        JR   ADD10

ADD2:   PUSH BC         ;Gem fortegn
        SET  7,B        ;Saet MSB
        XOR  A          ;Saet Z'
        EX   AF,AF'
        EXX
        SET  7,B        ;Saet MSB'
        LD   A,L        ;A=EXP'-EXP
        EXX
        SUB  L
        JR   Z,ADD4     ;EXP=EXP' => ADD4
        JR   NC,ADD3    ;EXP<EXP' => ADD3

        NEG             ;Goer A positiv
        EX   AF,AF'     ;Nulstil Z'
        DEC  A
        EX   AF,AF'
        EXX             ;Juster AC'

ADD3:   CALL SRIGHT     ;Skift til hoejre
        INC  L          ;Er EXP=EXP'?
        DEC  A
        JR   NZ,ADD3    ;Nej => ADD3

        EX   AF,AF'     ;Var det AC'?
        JR   Z,ADD4     ;Nej => ADD4
        EXX             ;Ja => Ombyt

ADD4:   POP  AF         ;Hent AC fortegn
        AND  SIGN       ;Negativt?
        JR   NZ,ADD5    ;Ja => ADD5

        CALL ADDAC      ;MANT=MANT+MANT'
        JR   NC,ADD9    ;Ikke overflow => ADD9
        CALL RIGHT      ;Roter til hoejre
        OR   A
        INC  L          ;Juster exponent
        JR   NZ,ADD9
        SCF
        JR   ADD10

ADD5:   CALL CMPAC      ;Sammenlign
        CCF             ;Komplementer carry og
        PUSH AF         ;gem som fortegn
        JR   Z,ADDZ     ;AC=AC' => ADDZ
        JR   C,ADD6     ;AC>AC' => ADD6
        EXX             ;AC<AC' => Ombyt
ADD6:   CALL SUBAC      ;MANT=MANT-MANT'
ADD7:   BIT  7,B        ;Normaliseret?
        JR   NZ,ADD8    ;Ja => ADD8
        CALL SLEFT      ;Skift til venstre
        INC  L          ;Er exponent -128?
        DEC  L
        JR   Z,ADDZ     ;Ja => AC lig nul
        DEC  L          ;Traek 1 fra exponent
        JR   ADD7

ADDZ:   CALL ZERO

ADD8:   POP  AF         ;Hent fortegn
ADD9:   JR   C,ADD9A    ;Carry => negativt
        RES  7,B
ADD9A:  OR   A

ADD10:  EXX             ;Hent AC'
        POP  HL
        POP  DE
        POP  BC
        EXX
        RET


;FLOATING POINT SUBTRAKTION

FPSUB:  EXX             ;Er AC negativ?
        BIT  7,B
        EXX
        JP   NZ,ADD1    ;Ja => ADD1

SUB1:   CALL FPNEG      ;AC=-AC
        CALL ADD1       ;Laeg AC' til AC

FPNEG:  INC  L          ;Er AC nul?
        DEC  L
        RET  Z          ;Ja => Returner
        EX   AF,AF'     ;Gem carry
        LD   A,B        ;Komplementer fortegn
        XOR  SIGN
        LD   B,A
        EX   AF,AF'     ;Hent carry
        RET


;FLOATING POINT DIVISION.

FPDIV:  EXX             ;Er AC' nul?
        INC  L
        DEC  L
        EXX
        SCF
        RET  Z          ;Ja => Overflow

        LD   A,L        ;Er AC nul?
        OR   A
        RET  Z          ;Ja => Returner

        EXX             ;Subtraher exponenter
        SUB  L
        EXX
        CCF             ;Juster exponent og
        CALL EXPSGN     ;udregn fortegn

        PUSH HL         ;Opret 6 bytes work-
        PUSH HL         ;space
        PUSH HL
        ADD  IX,SP

        EXX             ;5 bytes
        LD   L,5
        EXX
        LD   A,8        ;Med hver 8 bits

DIVI1:  EX   AF,AF'     ;Gem taeller
        CALL CMPAC      ;Er MANT>MANT'
        JR   C,DIVI2    ;Nej => DIVI2
        CALL SUBAC      ;Traek AC' fra AC

DIVI2:  CCF             ;Komplementer carry
        RL   L          ;Roter ind i resultat
        EX   AF,AF'     ;Hent bittaeller
        DEC  A          ;Byte faerdig?
        JR   NZ,DIVI3   ;Nej => DIVI3

        LD   (IX+5),L   ;Gem byte i buffer
        DEC  IX         ;Peg til naeste
        EXX             ;Er 5 bytes klaret?
        DEC  L
        EXX
        JR   Z,DIVI4    ;Ja => DIVI4
        LD   A,8        ;8 bits

DIVI3:  CALL SLEFT      ;Skift AC til venstre
        JR   NC,DIVI1   ;Ingen carry => DIVI1

        EX   AF,AF'     ;Gem taeller
        CALL SUBAC      ;MANT=MANT-MANT'
        OR   A          ;Nulstil carry
        JR   DIVI2

DIVI4:  CALL SLEFT      ;Udregn afrundingsbit
        JR   C,DIVI5
        CALL CMPAC
        CCF

DIVI5:  POP  HL         ;Hent resultat
        POP  DE
        POP  BC
        BIT  7,B        ;Normaliseret?
        JR   NZ,DIVI6   ;Ja => DIVI6

        CALL LEFT       ;Roter afrundingsbit
        JR   MUL5       ;ind i resultatet

DIVI6:  INC  L          ;Laeg 1 til exponent
        JR   NZ,MUL5
        DEC  L
        SCF
        JR   MUL5A


;FLOATING POINT MULTIPLIKATION

FPMUL:  EXX             ;Er AC' nul?
        LD   A,L
        OR   A
        EXX
        JP   Z,ZERO     ;Ja => Resultat 0

        LD   A,L        ;Er AC nul?
        OR   A
        RET  Z          ;Ja => Retur

        EXX             ;Adder exponenter
        ADD  A,L
        EXX             ;Juster exponent og
        CALL EXPSGN     ;udregn fortegn

        PUSH BC         ;Gem AC
        PUSH DE
        PUSH HL
        ADD  IX,SP      ;Peg IX til AC

        CALL ZERO       ;Nulstil resultat
        EXX             ;5 bytes
        LD   L,5
        EXX

MUL1:   LD   A,8        ;Bittaeller lig 8
        INC  IX         ;Hent ny byte
        LD   L,(IX+0)

MUL2:   EX   AF,AF'     ;Gem taeller
        RR   L          ;Roter byte til hoejre
        JR   NC,MUL3    ;Hvis carry saa laeg
        CALL ADDAC      ;AC' til resultatet

MUL3:   CALL RIGHT      ;Roter res. til hoejre
        EX   AF,AF'     ;Hent taeller
        DEC  A          ;Byte faerdig?
        JR   NZ,MUL2    ;Nej => MUL2
        EXX             ;5 bytes klaret?
        DEC  L
        EXX
        JR   NZ,MUL1    ;Nej => MUL1

        LD   L,(IX-5)   ;Hent exponent
        BIT  7,B        ;Normaliseret?
        JR   NZ,MUL4    ;Ja => MUL4

        EX   AF,AF'     ;Hent sidste carry
        CALL LEFT       ;Roter res. til venstre
        INC  L          ;Traek 1 fra exponent
        DEC  L
        JR   Z,MUL4
        DEC  L

MUL4:   POP  AF         ;Fjern workspace
        POP  AF
        POP  AF

MUL5:   OR   A          ;Status = OK
MUL5A:  EX   AF,AF'     ;Gem status
        POP  AF         ;Hent res. fortegn
        EXX
        POP  BC         ;Hent AC' fortegn
        POP  HL         ;Hent AC' exponent
        EXX
        POP  IX         ;Hent IX
        RES  7,B        ;Erstat MSB i AC med
        OR   B          ;fortegn
        LD   B,A
        EX   AF,AF'     ;Hent status
        INC  L
        DEC  L
        CALL Z,ZERO
        RET

;Juster exponent og udregn fortegn.

EXPSGN: JR   C,EXPS1    ;Carry => EXPS1
        ADD  A,EXPN     ;Juster exponent
        JR   C,EXPS2    ;Carry => EXPS2
        JR   EXPS3      ;Underflow

EXPS1:  ADD  A,EXPN     ;Juster exponent
        JR   C,EXPS3    ;carry => Overflow

EXPS2:  LD   L,A        ;Gem i exponent
        EX   (SP),IX    ;Gem IX
        EXX
        PUSH HL         ;Gem AC' exponent
        PUSH BC         ;Gem AC' fortegn
        LD   A,B        ;Udregn nyt fortegn
        SET  7,B
        EXX
        XOR  B
        AND  SIGN
        PUSH AF
        SET  7,B
        PUSH IX
        LD   IX,0       ;Nulstil IX
        RET

EXPS3:  POP  HL         ;Juster stakken
        RET  C          ;Carry => Returner

;Nulstil AC.

ZERO:   XOR  A          ;Nulstil carry, expo-
        LD   L,A        ;nent og mantissa
        LD   B,A
        LD   C,A
        LD   D,A
        LD   E,A
        LD   H,A
        RET

;Roter AC til hoejre.

SRIGHT: OR   A
RIGHT:  RR   B
        RR   C
        RR   D
        RR   E
        RR   H
        RET

;Roter AC til venstre.

SLEFT:  OR   A
LEFT:   RL   H
        RL   E
        RL   D
        RL   C
        RL   B
        RET

;Laeg AC' til AC.

ADDAC:  LD   A,H
        EXX
        ADD  A,H
AAC1:   EXX
        LD   H,A
        LD   A,E
        EXX
        ADC  A,E
        EXX
        LD   E,A
        LD   A,D
        EXX
        ADC  A,D
        EXX
        LD   D,A
        LD   A,C
        EXX
        ADC  A,C
        EXX
        LD   C,A
        LD   A,B
        EXX
        ADC  A,B
        EXX
        LD   B,A
        RET

;Traek AC' fra AC.

SUBAC:  LD   A,H
        EXX
        SUB  H
SAC1:   EXX
        LD   H,A
        LD   A,E
        EXX
        SBC  A,E
        EXX
        LD   E,A
        LD   A,D
        EXX
        SBC  A,D
        EXX
        LD   D,A
        LD   A,C
        EXX
        SBC  A,C
        EXX
        LD   C,A
        LD   A,B
        EXX
        SBC  A,B
        EXX
        LD   B,A
        RET

;Sammenlign AC med AC'.

CMPAC:  LD   A,B
        EXX
        CP   B
        EXX
        RET  NZ
        LD   A,C
        EXX
        CP   C
        EXX
        RET  NZ
        LD   A,D
        EXX
        CP   D
        EXX
        RET  NZ
        LD   A,E
        EXX
        CP   E
        EXX
        RET  NZ
        LD   A,H
        EXX
        CP   H
        EXX
        RET


;FLOATING POINT COMPARE.

CMP:    EXX             ;Er fortegn ens?
        LD   A,B
        EXX
        XOR  B
        JP   P,CMP1     ;Ja => CMP1
        LD   A,B        ;Fortegn fra AC til
        RLA             ;carry
        RET

CMP1:   BIT  7,B        ;Negative tal?
        JR   Z,CMP2     ;Nej => CMP2

        CALL CMP2       ;Sammenlign abs.vaerdi
        RET  Z          ;Ens => Returner
        CCF             ;Complementer resultat
        RET

CMP2:   LD   A,L        ;Er exponenter ens?
        EXX
        CP   L
        EXX
        RET  NZ         ;Nej => Returner
        OR   A          ;Er exponenter nul?
        RET  Z          ;Ja => Returner
        JP   CMPAC      ;Sammenlign AC med AC'


;FLOATING POINT INTEGER.

INT:    LD   A,L        ;Er exponent mindre
        SUB  EXPN+1     ;end nul?
        JP   C,ZERO     ;Ja => Resultat nul
        INC  A

        EXX             ;Gem AC'
        PUSH BC
        PUSH DE
        PUSH HL
        EX   AF,AF'
        CALL ZERO       ;Nulstil AC'
        EX   AF,AF'

INT1:   SCF             ;Saet alle bits der har
        CALL RIGHT      ;en exponent stoerre
        DEC  A          ;end eller lig nul
        JR   NZ,INT1

        EXX             ;Nulstil alle bits i AC
        LD   A,H        ;der har en exponent
        EXX             ;mindre end 0
        AND  H
        EXX
        LD   H,A
        LD   A,E
        EXX
        AND  E
        EXX
        LD   E,A
        LD   A,D
        EXX
        AND  D
        EXX
        LD   D,A
        LD   A,C
        EXX
        AND  C
        EXX
        LD   C,A
        LD   A,B
        EXX
        AND  B
        EXX
        LD   B,A
INT2:   JP   ADD10      ;Hent AC'


;FLOATING POINT FRACTION.

;FRAC(X) udregnes af X-INT(X).

FRAC:   EXX
        PUSH BC
        PUSH DE
        PUSH HL
        EXX

        CALL EQUAL
        EXX
        CALL INT
        EXX
        CALL FPSUB
        JR   INT2


;MODULUS.

;X MOD Y beregnes af FRAC(X/Y)*Y.

MOD:    CALL FPDIV
        RET  C
        CALL FRAC
        JP   FPMUL


;KVADRATROD.

;Kvadratroden beregnes med Newton-Raphson
;iterationsmetoden. Et gaet udregnes ud fra
;det foregaaende gaet efter formelen:
;I(n+1)=(X/I(n)+I(n))/2.
;Som foerste gaet halveres X's exponent.
;Der fortsaettes indtil ABS(I(n+1)-I(n)) er
;mindre end den halve exponent af X minus 20.

SQR:    LD   A,L        ;Er AC nul?
        OR   A
        RET  Z          ;Ja => Returer

        BIT  7,B        ;Er AC negativ?
        SCF             ;Saet carry
        RET  NZ         ;Ja => Returner

        EXX             ;Gem AC'
        PUSH BC
        PUSH DE
        PUSH HL
        EXX
        CALL EQUAL      ;AC'=AC
        LD   A,L        ;Foerste iteration:
        ADD  A,EXPN     ;halver exponenten
        SRA  A
        ADD  A,EXPN
        LD   L,A        ;Sammenligningsvaerdi
        SUB  20         ;er den halve exponent
        PUSH AF         ;Gem s.vaerdi
        EXX

SQR1:   PUSH BC         ;Gem tallet
        PUSH DE
        PUSH HL
        CALL FPDIV      ;Divider med og adder
        CALL FPADD      ;forrige gaet
        DEC  L          ;Halver
        PUSH BC         ;Gem dette gaet
        PUSH DE
        PUSH HL
        CALL FPSUB      ;Udregn forskellen mel-
        LD   A,L        ;lem de to gaet
        POP  HL         ;Hent det nye gaet
        POP  DE
        POP  BC
        EXX
        POP  HL         ;Hent tallet
        POP  DE
        POP  BC
        EX   (SP),HL    ;Hent s.vaerdi ind i H
        CP   H
        EX   (SP),HL    ;Fortsaet indtil forsk.
        JR   NC,SQR1    ;er lille nok

        POP  AF         ;Fjern s.vaerdi
        EXX
        OR   A          ;Nulstil carry
SQR2:   JP   ADD10      ;Hent AC'


;TANGENS.

;TAN(X) beregnes af SIN(X)/COS(X)

TAN:    EXX
        PUSH BC
        PUSH DE
        PUSH HL
        EXX
        CALL EQUAL
        CALL COS
        EXX
        CALL SIN
        CALL FPDIV
        JR   SQR2


;COSINUS.

;COS(X) beregnes af SIN(PI/2-X)

COS:    EXX
        PUSH BC
        PUSH DE
        PUSH HL
        CALL ACPI
        DEC  L
        CALL FPSUB
        EXX
        JR   SINC


;SINUS.

;SIN(X) beregnes paa flg. maade:
;Hvis ABS(X)>2*PI saa X=FRAC(X/(2*PI))*2*PI
;Hvis X<0 saa X=X+2*PI
;Hvis X>PI saa X=X-PI, fortegn -
;Hvis X>PI/2 saa X=PI-X
;Y=X/3, Z=Y^2
;SIN(Y)=Y(((((Z+K1)Z+K2)Z+K3)Z+K4)Z+K5)/K5
;K1=-110      K2=7920       K3=-332640
;K4=6652800   K5=-39916800
;SIN(X)=4(.75*SIN(Y)-SIN(Y)^3)

SIN:    EXX             ;Gem AC'
        PUSH BC
        PUSH DE
        PUSH HL
SINC:   CALL ACPI       ;AC'=2PI
        INC  L
        EXX

        LD   A,L        ;Hvis tallet er mindre
        CP   EXPN-20    ;end 1E-7 saa returner
        JP   C,SIN7

        PUSH BC         ;Er ABS(AC)>2PI
        RES  7,B
        CALL CMP
        POP  BC
        CALL NC,MOD     ;Ja => AC=AC MOD 2PI

SIN1A:  BIT  7,B        ;Hvis AC<0 saa laeg
        JR   Z,SIN2     ;2PI til AC
        CALL FPADD

SIN2:   EXX             ;AC'=PI
        DEC  L
        EXX
        CALL CMP        ;Er AC>PI?
        PUSH AF         ;Gem flag som fortegn
        JR   C,SIN3     ;Nej => SIN3
        CALL FPSUB      ;AC=AC-PI

SIN3:   EXX             ;AC'=PI/2
        DEC  L
        EXX
        CALL CMP        ;Er AC>PI/2?
        JR   C,SIN4     ;Nej => SIN4
        EXX             ;AC=PI-AC
        INC  L
        CALL FPSUB

SIN4:   LD   A,L        ;Hvis tallet er mindre
        CP   EXPN-20    ;end 1E-7 saa returner
        JR   C,SIN7A

        EXX             ;AC=AC/3
        LD   BC,02AAAH
        LD   DE,0AAAAH
        LD   HL,0AA7FH
        CALL FPMUL

        PUSH IX
        LD   IX,SINK-6
        LD   A,5
        CALL COMSER
        POP  IX

        CALL EQUAL      ;Gem i AC'
        CALL FPMUL      ;Udregn SIN(X)^3
        CALL FPMUL
        PUSH BC         ;Gem paa stakken
        PUSH DE
        PUSH HL
        EXX
        CALL EQUAL      ;Udregn .75*SIN(X)
        DEC  L
        DEC  L
        EXX
        DEC  L
        CALL FPADD
        EXX             ;Hent SIN(X)^3
        POP  HL
        POP  DE
        POP  BC
        EXX
        CALL FPSUB      ;Traek det fra
        INC  L          ;Gang med 4
        INC  L

SIN7A:  POP  AF         ;Indsaet fortegn
        INC  L
        DEC  L
        JR   Z,SIN7
        JR   C,SIN7
        LD   A,B
        XOR  SIGN
        LD   B,A
SIN7:   OR   A
        JP   ADD10      ;Hent AC'

;Konstanter for udregning af SINUS.

SINK:   DW 0DC00H,00000H,00087H  ;K1

        DW 07780H,00000H,0008DH  ;K2

        DW 0A26CH,00000H,00093H  ;K3

        DW 04B07H,00000H,00097H  ;K4

        DW 09845H,04000H,0009AH  ;K5



;TITALS LOGARITME.

;LOG(X) beregnes af LN(X)/LN(10).

LOG:    CALL LN
        RET  C
        EXX
        PUSH BC
        PUSH DE
        PUSH HL
        LD   BC,05E5BH  ;1/LN(10)
        LD   DE,0D8A9H
        LD   HL,0367FH
        CALL FPMUL
        JP   ADD10


;NATURLIGE LOGARITME.

;LN(X) beregnes paa flg. maade:
;X=Y*2^N, 1<=Y<2
;Z=Y*SQR(2)/2
;U=(Z-1)/(Z+1), V=U^2
;R=U((((((V+K1)V+K2)V+K3)V+K4)V+K5)V+K6)/K6
;Kn=13/(13-2n)
;LN(X)=2*R+LN(2)/2+N*LN(2)

LN:     INC  L          ;Er AC nul?
        DEC  L
        SCF             ;Indiker fejl
        RET  Z          ;Ja => Returner
        BIT  7,B        ;Negativ?
        RET  NZ         ;Ja => Returner

        EXX             ;Gem AC'
        PUSH BC
        PUSH DE
        PUSH HL
        LD   BC,03504H  ;AC'=SQR(2)/2
        LD   DE,0F333H
        LD   HL,0FB80H
        EXX

        LD   A,L        ;Udregn N
        LD   L,EXPN+1   ;Udregn Y
        SUB  L
        PUSH AF         ;Gem N

        CALL FPMUL      ;Udregn Z
        EXX             ;Udregn U
        CALL AC1
        EXX
        CALL FPSUB
        PUSH BC
        PUSH DE
        PUSH HL
        EXX
        INC  L
        CALL FPADD
        EXX
        POP  HL
        POP  DE
        POP  BC
        CALL FPDIV

        PUSH IX         ;Udregn LN(Z)
        LD   IX,LNK-6
        LD   A,6
        CALL COMSER
        POP  IX

        INC  L          ;Laeg LN(2)/2 til
        EXX
        CALL ACLN2
        DEC  L
        EXX
        CALL FPADD
        POP  AF
        PUSH BC         ;Gem resultat
        PUSH DE
        PUSH HL
        LD   L,A        ;Udregn N*LN(2)
        LD   H,0
        JR   NC,LN1
        DEC  H
LN1:    CALL FLOAT
        EXX
        INC  L
        CALL FPMUL
        EXX
        POP  HL         ;Hent resultat
        POP  DE
        POP  BC
        CALL FPADD      ;Adder
        LD   A,L
        CP   EXPN-25    ;LN(X)<3E-8 => LN(X)=0
        CALL C,ZERO
        JP   ADD10      ;Hent AC'

;Konstanter for udregning af LN.

LNK:    DW 01745H,0D174H,05D81H  ;K1

        DW 038E3H,08E38H,0E481H  ;K2

        DW 06DB6H,0DB6DH,0B781H  ;K3

        DW 02666H,06666H,06682H  ;K4

        DW 00AAAH,0AAAAH,0AB83H  ;K5

        DW 05000H,00000H,00084H  ;K6



;POTENSOPLOEFTNING.

;X^Y beregnes af EXP(Y*LN(X)).

PWR:    LD   A,L
        OR   A
        RET  Z
        CALL LN
        RET  C
        CALL FPMUL
        RET  C


;EXPONENTIALFUNKTIONEN.

;Hvis X<0 saa udregnes EXP(X)=1/EXP(-X).
;EXP(X) beregnes paa flg. maade:
;EXP(X)=2^Y, Y=X/LN(2)
;2^Y=2^INT(Y)*2^Z, Z=FRAC(Y)
;2^Z udregnes af:
;2^Z=(((((((Z+K1)*Z+K2)*Z)2+K3)....)*Z+K7)/K7
;K1=6.6042604723   K2=62.027114868
;K3=444.01034843   K4=2563.5667136
;K5=11095.090786   K6=32013.685271
;K7=46185.984492

EXP:    EXX             ;Gem AC'
        PUSH BC
        PUSH DE
        PUSH HL
        CALL ACLN2      ;AC'=LN(2)
        EXX

        OR   A          ;Gem fortegn
        BIT  7,B
        PUSH AF
        RES  7,B        ;Goer positivt

        CALL FPDIV      ;Udregn Y
        LD   A,L        ;Er Y>128?
        CP   EXPN+8
        JP   NC,EXP4    ;Ja => EXP4

        CALL EQUAL      ;AC'=Y
        CALL FRAC       ;Udregn Z=FRAC(Y)
        EXX             ;Udregn INT(Y)
        CALL FIX
        LD   A,L
        PUSH AF         ;Gem INT(Y)
        EXX

EXP1:   PUSH IX         ;Udregn 2^Z
        LD   IX,EXPK-6
        LD   A,7
        CALL CALCS
        POP  IX

EXP3:   POP  AF         ;Hent 2^INT(Y)
        ADD  A,L        ;Udregn 2^Z*2^INT(Y)
        LD   L,A
        JR   NC,EXP6    ;Ikke overflow => EXP6

EXP4:   POP  AF         ;Juster stakken
        SCF             ;Indiker overflow
EXP5:   JP   ADD10      ;Hent AC'

EXP6:   POP  AF         ;Hent fortegn
        JR   Z,EXP5     ;Positivt => EXP5
        EXX             ;Tag den reciprokke
        CALL AC1
        CALL FPDIV
        JR   EXP5

;Konstanter for udregning af EXP.

EXPK:   DW 05356H,01A0EH,0DE83H  ;K1

        DW 0781BH,0C3FFH,0FB86H  ;K2

        DW 05E01H,05318H,0F189H  ;K3

        DW 02039H,01142H,0418CH  ;K4

        DW 02D5CH,05CF6H,0DF8EH  ;K5

        DW 07A1BH,05EDBH,0CD8FH  ;K6

        DW 03469H,0FC07H,0E590H  ;K7


;ARCCUS TANGENS.

;Hvis X>1 udregnes ATN(X)=PI/2-ATN(1/X).
;Til beregning af ATN(X) bruges:
;Y=X^2, A=PI/24,
;ATN(X)=X(((((Y+K1)*Y+K2)*Y+K3)*Y+K4)*Y+K5)/K5,
;hvor 0<=X<A og
;K1=-11/9  K2=11/7  K3=-11/5  K4=11/3  K5=-11
;X bestemmes til at ligge i et af interv.:
;1. X<TAN(A)
;2. TAN(A)<=X<TAN(3*A)    ,K=2*A
;3. TAN(3*A)<=X<TAN(5*A)  ,K=4*A
;4. X>=TAN(5*A)           ,K=6*A
;Hvis X er i foerste interv. bruges formelen
;alene, men ellers bruges:
;Y=(X-TAN(K))/(1+X*TAN(K))
;ATN(X)=K+ATN(Y)

ATN:    LD   A,L
        OR   A
        RET  Z
        EXX             ;Gem AC'
        PUSH BC
        PUSH DE
        PUSH HL
        PUSH IX
        CALL AC1        ;AC'=1
        EXX
        XOR  A          ;Nulstil flagbyte
        BIT  7,B        ;Er AC positiv?
        JR   Z,ATN1     ;Ja => ATN1

        INC  A          ;Saet negativflag
        RES  7,B        ;AC=ABS(AC)

ATN1:   PUSH AF         ;Gem flag
        CALL CMP        ;Er AC>1
        JR   C,ATN2     ;Ja => ATN2

        EXX             ;AC=1/AC
        CALL FPDIV
        POP  AF         ;Saet reciprokflag
        SET  7,A
        PUSH AF

ATN2:   EXX
        LD   BC,006CFH
        LD   DE,0E98EH
        LD   HL,04A7EH
        EXX
        CALL CMP        ;Er AC<TAN(PI/24)?
        JR   NC,ATN3    ;Nej => ATN3

        CALL ARCTAN     ;Udregn ATN(X)
        JR   ATN6

ATN3:   LD   IX,ATNK-18 ;Peg IX til skalerings-
        LD   A,2        ;konstanter

ATN4:   EX   AF,AF'     ;Gem taeller
        EXX
        LD   DE,18      ;Peg til naeste saet
        ADD  IX,DE
        CALL GETCIX     ;Hent oeverste endepkt.
        EXX
        CALL CMP        ;Er X i dette interval?
        JR   C,ATN5     ;Ja => ATN5
        EX   AF,AF'     ;Hent taeller
        DEC  A          ;Faerdig?
        JR   NZ,ATN4    ;Nej => ATN4

        EXX             ;Juster IX
        LD   DE,12
        ADD  IX,DE
        EXX

ATN5:   EXX
        CALL GTNCIX     ;Hent TAN(K)
        SET  7,B        ;Udregn X-TAN(K)
        CALL FPADD
        PUSH BC         ;Gem resultat
        PUSH DE
        PUSH HL
        CALL GETCIX     ;Hent TAN(K)
        CALL FPMUL      ;Udregn X*TAN(K)
        EXX
        CALL AC1        ;Laeg 1 til
        CALL FPADD
        EXX             ;Gem i AC'
        POP  HL         ;Hent forrige resultat
        POP  DE
        POP  BC
        CALL FPDIV      ;Udregn Y
        PUSH IX         ;Udregn ATN(Y)
        CALL ARCTAN
        POP  IX
        EXX
        CALL GTNCIX     ;Hent K
        CALL FPADD      ;Udregn K+ATN(Y)

ATN6:   POP  AF         ;Hent flagbyte
        RLA             ;Var X>1?
        JR   NC,ATN7    ;Nej => ATN7

        PUSH AF         ;Gem flagbyte
        EXX             ;Udregn PI/2-ATN(X)
        CALL ACPI
        DEC  L
        CALL FPSUB
        POP  AF         ;Hent flagbyte

ATN7:   POP  IX         ;Hent IX
        BIT  1,A        ;Var X<0?
        JR   Z,ATN8     ;Nej => ATN8
        SET  7,B        ;Resultat negativt
ATN8:   OR   A
        JP   ADD10      ;Hent AC'

;Konstanter til skalering af X under beregning
;af ATN.

ATNK:   DW 05413H,0CCCFH,0E77FH  ;TAN(3*A)

        DW 00930H,0A2F4H,0F67FH  ;TAN(2*A)

        DW 0060AH,091C1H,06A7FH  ;2*A

        DW 0446FH,08A9EH,0B580H  ;TAN(5*A)

        DW 013CDH,03A2CH,08280H  ;TAN(4*A)

        DW 0060AH,091C1H,06A80H  ;4*A

        DW 00000H,00000H,00081H  ;TAN(6*A)

        DW 0490FH,0DAA2H,02180H  ;6*A


;Konstanter for beregning af ATN.

ARCTK:  DW 09C71H,0C71CH,07281H  ;K1

        DW 04924H,09249H,02581H  ;K2

        DW 08CCCH,0CCCCH,0CD82H  ;K3

        DW 06AAAH,0AAAAH,0AB82H  ;K4

        DW 0B000H,00000H,00084H  ;K5


;Udregn taylorraekken for ARCCUS TANGENS.

ARCTAN: LD   IX,ARCTK-6
        LD   A,5

;COMSER udregner en potensraekke af formen:
;T=X*((((X^2+K1)*X^2+K2)....)*X^2+Kn)/Kn,
;hvor X er i AC, n er i A, og adressen paa
;konstanterne (minus 6) i IX.

COMSER: PUSH BC         ;Gem X
        PUSH DE
        PUSH HL
        PUSH AF         ;Gem laengde
        CALL EQUAL      ;Udregn Z=X^2
        CALL FPMUL
        POP  AF         ;Hent laengde
        CALL CALCS      ;Udregn raekken
        EXX             ;Hent X
        POP  HL
        POP  DE
        POP  BC
        JP   FPMUL      ;Gang med X

;CALCS udregner en potensraekke af formen:
;U=(((((Z+K1)*Z+K2)*Z+K3)....)*Z+Kn)/Kn,
;hvor Z er i AC, n er i A, og adressen paa
;konstanterne (minus 6) i IX.

CALCS:  EXX             ;Gem Z i AC'
        CALL AC1        ;Start med resultat=1
CALC1:  PUSH AF         ;Gang med Z
        CALL FPMUL
        POP  AF
        PUSH AF
        EXX
        PUSH BC         ;Gem Z
        PUSH DE
        PUSH HL
        CALL GTNCIX     ;Hent naeste konstant
        CALL FPADD      ;Laeg til resultat
        EXX             ;Hent Z
        POP  HL
        POP  DE
        POP  BC
        EXX
        POP  AF         ;Faerdig?
        DEC  A
        JR   NZ,CALC1   ;Nej => CALC1
        EXX
        CALL GETCIX
        EXX
        JP   FPDIV

;Saet AC lig den konstant IX peger paa.

GTNCIX: LD   DE,6
        ADD  IX,DE
GETCIX: LD   C,(IX+0)
        LD   B,(IX+1)
        LD   E,(IX+2)
        LD   D,(IX+3)
        LD   L,(IX+4)
        LD   H,(IX+5)
        RET

;Saet AC lig 2*PI.

ACPI:   LD   BC,0490FH
        LD   DE,0DAA2H
        LD   HL,02182H
        RET

;Saet AC lig LN(2).

ACLN2:  LD   BC,03172H
        LD   DE,017F7H
        LD   HL,0D280H
        RET

;FLOATING POINT EQUAL.

EQUAL:  PUSH BC
        PUSH DE
        PUSH HL
        EXX
        POP  HL
        POP  DE
        POP  BC
        RET

;FLOATING POINT TIL 16-BIT INTEGER MED
;2'S COMPLEMENT FORTEGN.

FIX:    OR   A
        BIT  7,L        ;Exponent<0?
        JR   Z,FIX4     ;Ja => FIX4
        BIT  7,B        ;Gem fortegn
        EX   AF,AF'
        SET  7,B        ;Saet MSB

FIX1:   LD   A,EXPN+15  ;Test exponent
        CP   L
        RET  C          ;EXP>15 => overflow
        JR   Z,FIX2     ;EXP=15 => FIX2
        CALL SRIGHT     ;EXP<15 => roter til
        INC  L          ;hoejre og laeg 1 til
        JR   FIX1       ;exponent

FIX2:   CALL SRIGHT     ;Roter til hoejre
        EX   AF,AF'     ;Negativt fortegn?
        JR   Z,FIX3     ;Nej => INT2
        LD   HL,0       ;Tag 2's complement
        SBC  HL,BC
        OR   A          ;Nulstil carry
        RET

FIX3:   LD   H,B        ;Hent tallet
        LD   L,C
        RET

FIX4:   LD   HL,0       ;Underflow
        RET

;16-BIT INTEGER MED 2'S COMPLEMENT FORTEGN
;TIL FLOATING POINT.

FLOAT:  LD   A,H        ;Er HL=0?
        OR   L
        JP   Z,ZERO     ;Ja => ZERO

        BIT  7,H        ;Er HL negativ?
        JR   Z,FLT1     ;Nej => FLT1

        EX   DE,HL      ;Tag 2's complement
        LD   HL,0
        OR   A
        SBC  HL,DE

FLT1:   EX   AF,AF'     ;Gem fortegn i F'
        LD   B,H        ;Saet mantissa
        LD   C,L
        LD   DE,0
        LD   HL,EXPN+16 ;Saet exponent

FLT2:   BIT  7,B        ;Normaliser
        JR   NZ,FLT3
        CALL SLEFT
        DEC  L
        JR   FLT2

FLT3:   EX   AF,AF'     ;Negativt?
        RET  C          ;Ja => Retur
        RES  7,B        ;Positivt
        RET


;FLYDENDE TAL TIL TEKSTSTRENG.

;Resultatet afleveres i den buffer IX peger
;paa, og er afsluttet med et 0.
;Udskriftens format afgoeres af H' og L'.

;Register L':

;Bit 0    Udskriftstype
;           0 - Fastkomma notation
;           1 - Exponentiel notation
;Bit 2-1  Fortegnsformat
;           00 - Intet fortegn
;           01 - AC>=0: Intet fortegn
;                AC<0:  "-"
;           10 - AC>=0: " "
;                AC<0:  "-"
;           11 - AC>=0: "+"
;                AC<0:  "-"
;Bit 3    Decimaldelsformat
;           0 - Kun betydende cifre
;           1 - Skriv alle cifre
;Bit 4    Heltalsdelformat
;           0 - Kun betydende cifre
;           1 - Blanktegn foer betydende cifre

;Register H':

;Bit 3-0  Decimalfeltets laengde (0-15)
;Bit 7-4  Heltalsfeltets laengde (1-15)
;         Bruges kun hvis bit 0 i L' er 0


FSTRR:  EXX
        LD   A,L        ;Gem format i A og A'
        EX   AF,AF'
        LD   A,H
        EXX
        JR   OUTN1

;FLYDENDE TAL TIL TEKSTSTRENG.

;Formatet efterfoelger kaldet som to bytes, der
;har samme betydning som L' henholdsvis H' ved
;kald af FSTRR.

FSTRS:  EX   (SP),IX
        LD   A,(IX+0)    ;Gem format i A og A'
        INC  IX
        EX   AF,AF'
        LD   A,(IX+0)
        INC  IX
        EX   (SP),IX

OUTN1:  PUSH IX         ;Gem IX,IY,AC,AC'
        PUSH IY
        PUSH BC
        PUSH DE
        PUSH HL
        EXX
        PUSH BC
        PUSH DE
        PUSH HL
        EXX
        LD   IY,-13     ;Opret en 13 bytes
        ADD  IY,SP      ;buffer paa stakken
        LD   SP,IY
        EXX
        LD   E,A        ;Gem formatet
        EX   AF,AF'
        LD   D,A
        PUSH DE
        EXX

        INC  L          ;Er AC nul?
        DEC  L
        JR   NZ,DIGITS  ;Nej => DIGITS

        POP  DE         ;Hent formatet
DZERO:  LD   (IY+0),L   ;Marker bufferslut
        JP   OUTM

DIGITS: PUSH BC         ;Gem BC
        RES  7,B        ;Goer AC positiv
        LD   A,L        ;Hent exponent
        EXX

;Udregn titalsexponenten udfra totalsexponenten
;paa foelgende maade:
;E10=INT(E2*LOG(2))=INT((E2*77+5)/256)

        LD   H,0        ;HL=toexponent
        SUB  EXPN
        JR   NC,SC1
        DEC  H
SC1:    LD   L,A
        PUSH HL         ;HL=HL*77+5
        ADD  HL,HL
        ADD  HL,HL
        PUSH HL
        ADD  HL,HL
        LD   D,H
        LD   E,L
        ADD  HL,HL
        ADD  HL,HL
        ADD  HL,HL
        ADD  HL,DE
        POP  DE
        ADD  HL,DE
        POP  DE
        ADD  HL,DE
        LD   DE,5
        ADD  HL,DE
        LD   A,H        ;A=INT(HL/256)
        CP   -39
        JR   NZ,SC2
        INC  A
SC2:    LD   (IY+0),A   ;Gem tiexponent
        NEG             ;Multiplicer AC med
        CALL TENF       ;10^-tiexponent
        LD   A,L        ;Er AC<1?
        CP   EXPN+1
        JR   NC,SC3     ;Nej => SC3
        DEC  (IY+0)     ;Tiexponent-1
        CALL MUL10      ;AC=AC*10

SC3:    SET  7,B
        LD   A,EXPN+4
        SUB  L
        LD   L,0
        JR   Z,DIGI1
SC4:    CALL SRIGHT
        RR   L
        DEC  A
        JR   NZ,SC4

DIGI1:  LD   A,(IY+0)   ;Hent tiexp.
        LD   (IY+0),0   ;Marker bufferstart
        PUSH IY         ;Gem IY
        PUSH AF         ;Gem tiexp.
        LD   A,12       ;Udregn 12 cifre

DIGI2:  EX   AF,AF'     ;Gem taeller
        LD   A,B
        RRA
        RRA
        RRA
        RRA
        AND  0FH
        ADD  A,'0'
        INC  IY
        LD   (IY+0),A
        LD   A,B
        AND  0FH
        LD   B,A

        PUSH BC         ;Gang AC med 10
        PUSH DE
        PUSH HL
        SLA  L
        CALL LEFT
        SLA  L
        CALL LEFT
        EX   DE,HL
        EX   (SP),HL
        ADD  HL,DE
        POP  DE
        EX   (SP),HL
        ADC  HL,DE
        EX   DE,HL
        POP  HL
        EX   (SP),HL
        ADC  HL,BC
        LD   B,H
        LD   C,L
        POP  HL
        SLA  L
        CALL LEFT

        EX   AF,AF'     ;Hent taeller
        DEC  A          ;Faerdig?
        JR   NZ,DIGI2   ;Nej => DIGI2

        POP  AF         ;Hent tiexp.
        POP  IY         ;Hent IY,BC
        POP  BC
        INC  IY         ;Peg til foerste ciffer
        LD   C,A        ;Gem titalsexp. i C

ROUND:  POP  DE         ;Hent format
        LD   A,E        ;Udregn nummeret paa
        AND  FWIDTH     ;det ciffer der skal
        INC  A          ;afrundes fra
        BIT  0,D
        JR   NZ,ROU1
        ADD  A,C
        JP   M,DZERO    ;Neg. => Udskriv 0

ROU1:   CP   12         ;Max. nummer 11
        JR   C,ROU2
        LD   A,11

ROU2:   PUSH IY         ;Udregn adressen paa
        POP  HL         ;det ciffer der skal
        ADD  A,L        ;afrundes
        LD   L,A
        JR   NC,ROU3
        INC  H

ROU3:   LD   A,(HL)     ;Hent ciffer
        LD   (HL),0     ;Marker bufferslut
        CP   '5'        ;Afrunding?
        JR   C,ROU5     ;Nej => ROU5

ROU4:   DEC  HL         ;Tag forrige ciffer
        LD   A,(HL)
        OR   A          ;Bufferstart?
        JR   Z,ROU6     ;Ja => ROU6
        INC  A          ;Laeg 1 til ciffer
        LD   (HL),A
        CP   '9'+1      ;Var ciffer '9'?
        JR   C,OUTM     ;Nej => OUTM
        LD   (HL),0     ;Marker bufferslut
        JR   ROU4

ROU5:   DEC  HL         ;Tag forrige ciffer
        LD   A,(HL)
        SUB  '0'        ;Er det '0'?
        JR   NZ,OUTM    ;Nej => OUTM
        LD   (HL),A     ;Marker bufferslut
        JR   ROU5

ROU6:   INC  HL         ;Tallet var 9999...
        LD   (HL),'1'   ;Lav om til 10000...
        INC  HL
        LD   (HL),0
        INC  C          ;Laeg 1 til tiexp.

OUTM:   LD   A,(IY+0)   ;Er tallet 0?
        OR   A
        JR   NZ,OM1     ;Nej => OM1
        LD   B,A        ;Positivt fortegn
        LD   C,A        ;Tiexp = 0

OM1:    BIT  0,D        ;Exponentielt?
        JR   NZ,OM6     ;Ja => OM6

        LD   A,E        ;Udregn det antal
        AND  IWIDTH     ;blanktegn der skal
        RRCA            ;udskrives inden tallet
        RRCA
        RRCA
        RRCA
        DEC  A
        BIT  2,D
        JR   NZ,OM2
        BIT  1,D
        JR   Z,OM3
        BIT  7,B
        JR   Z,OM3
OM2:    DEC  A
OM3:    BIT  7,C
        JR   NZ,OM4
        SUB  C
OM4:    OR   A          ;Negativt?
        SCF             ;Indiker fejl
        JP   M,POPALL   ;Ja => POPALL

        BIT  4,D        ;Blanktegn?
        JR   Z,OM6      ;Nej => OM6

        LD   H,A        ;Gem blanktegn
        INC  H
OM5:    DEC  H
        JR   Z,OM6
        LD   A,' '
        CALL STOA
        JR   OM5

OM6:    BIT  7,B        ;Gem fortegn
        JR   Z,OM7
        LD   A,'-'
        BIT  2,D
        JR   NZ,OM8
        BIT  1,D
        JR   NZ,OM8
        JR   OM9
OM7:    BIT  2,D
        JR   Z,OM9
        LD   A,' '
        BIT  1,D
        JR   Z,OM8
        LD   A,'+'
OM8:    CALL STOA

OM9:    BIT  0,D        ;Exponentielt?
        JR   Z,OM10     ;Nej => OM10
        LD   H,C        ;Gem tiexp. i H
        LD   C,0        ;tiexp. = 0

OM10:   BIT  7,C        ;Er tiexp.>=0?
        JR   Z,OM11     ;Ja => OM11

        CALL STOZ       ;Gem '0'
        JR   OM12

OM11:   CALL STODIG     ;Gem de cifre der
        DEC  C          ;staar foer kommaet
        JP   P,OM11

OM12:   LD   A,E        ;Skal der cifre efter
        AND  FWIDTH     ;kommaet?
        JR   Z,OM15     ;Nej => OM15
        LD   E,A
        CALL MORED      ;Er der flere cifre?
        JR   Z,OM15     ;Nej => OM15

        LD   A,'.'      ;Gem '.'
        CALL STOA

OM13:   INC  C          ;Gem ubetydende nuller
        JR   Z,OM14
        CALL STOZ
        DEC  E
        JR   NZ,OM13

OM14:   DEC  E          ;Gem betydende cifre
        JP   M,OM15
        CALL STODIG
        CALL MORED
        JR   NZ,OM14

OM15:   BIT  0,D        ;Exponentielt?
        JR   Z,POPA1    ;Nej => POPA1

        LD   A,'E'      ;Gem 'E'
        CALL STOA
        LD   A,'+'      ;Gem fortegn
        BIT  7,H
        JR   Z,OEX1
        LD   A,H
        NEG
        LD   H,A
        LD   A,'-'
OEX1:   CALL STOA
        LD   A,H        ;Udregn 2-cifret exp.
        LD   B,'0'-1
OEX2:   INC  B
        SUB  10
        JR   NC,OEX2
        ADD  A,10+'0'
        LD   (IX+0),B   ;Gem exponent
        INC  IX
        CALL STOA

POPA1:  OR   A          ;Nulstil carry
POPALL: EX   AF,AF'     ;Gem status
        LD   (IX+0),0   ;Marker bufferslut
        LD   HL,13      ;Fjern talbuffer
        ADD  HL,SP
        LD   SP,HL
        POP  HL         ;Hent AC',AC,IY,IX
        POP  DE
        POP  BC
        EXX
        POP  HL
        POP  DE
        POP  BC
        POP  IY
        POP  IX
        EX   AF,AF'     ;Hent status
        RET

;Gem et ciffer i bufferen.

STODIG: LD   A,(IY+0)   ;Hent ciffer
        INC  IY
        OR   A          ;Bufferslut?
        JR   NZ,STOA    ;Nej => STOA
        DEC  IY         ;Juster
STOZ:   LD   A,'0'      ;Gem '0'
STOA:   LD   (IX+0),A
        INC  IX
        RET

;Undersoeg om der er flere cifre.

MORED:  BIT  3,D
        RET  NZ
        LD   A,(IY+0)
        OR   A
        RET

;Multiplicer AC med 10^A.

TENF:   PUSH AF         ;Gem AF
        OR   A          ;Positiv exponent?
        JP   P,TF1      ;Ja => TF1
        NEG             ;A=ABS(A)
TF1:    PUSH AF         ;Gem flag
        SRL  A          ;A=INT(A/4)
        SRL  A
        LD   HL,-6      ;Udregn offset til
        LD   DE,6       ;konstant nummer A
        INC  A
TF2:    ADD  HL,DE
        DEC  A
        JR   NZ,TF2
        EX   DE,HL
        PUSH IX         ;Gem IX
        LD   IX,CON10   ;Hent konstant
        ADD  IX,DE
        CALL GETCIX
        POP  IX         ;Hent IX
        POP  AF         ;Hent exponent
        AND  3          ;Juster faktor
TF3:    JR   Z,TF4
        PUSH AF
        CALL MUL10
        POP  AF
        DEC  A
        JR   TF3
TF4:    POP  AF         ;Hent exponent
        OR   A          ;Positiv?
        JP   P,FPMUL    ;Ja => Multipicer
        EXX             ;Nej => Divider
        JP   FPDIV

;Tier potens konstanter for konvertering.

CON10:  DW 00000H,00000H,00081H ;1E+00

        DW 01C40H,00000H,0008EH ;1E+04

        DW 03EBCH,02000H,0009BH ;1E+08

        DW 0684DH,0A510H,000A8H ;1E+12

        DW 00E1BH,0C9BFH,004B6H ;1E+16

        DW 02D78H,0EBC5H,0ACC3H ;1E+20

        DW 053C2H,01BCEH,0CDD0H ;1E+24

        DW 0013FH,03978H,0F9DEH ;1E+28

        DW 01DC5H,0ADA8H,02BEBH ;1E+32

        DW 04097H,0CE7BH,0C9F8H ;1E+36



;AC=ABS(AC)*10.

MUL10:  LD   A,L
        OR   A
        RET  Z
        SET  7,B
        PUSH BC
        PUSH DE
        LD   A,H
        CALL SRIGHT
        CALL SRIGHT
        ADD  A,H
        LD   H,A
        EX   (SP),HL
        ADC  HL,DE
        EX   DE,HL
        POP  HL
        EX   (SP),HL
        ADC  HL,BC
        LD   B,H
        LD   C,L
        POP  HL
        JR   NC,M10A
        CALL RIGHT
        INC  L
        SCF
        RET  Z
M10A:   LD   A,L
        ADD  A,3
        LD   L,A
        RES  7,B
        RET

;ASCII TIL FLOATING POINT.

CNVN:   EXX             ;Gem AC'
        PUSH BC
        PUSH DE
        PUSH HL
        LD   BC,0       ;Nulstil flag
        EXX
        CALL ZERO       ;Nulstil AC

        LD   A,(IX+0)   ;Hent foerste karakter
        CP   '+'        ;Plus?
        JR   Z,CNV1     ;Ja => CNV1
        DEC  IX
        CP   '-'        ;Minus?
        JR   NZ,CNV1    ;Nej => CNV1
        EXX             ;Saet minusflag
        SET  7,B
        EXX
        INC  IX

CNV1:   INC  IX         ;Hent naeste karakter
        LD   A,(IX+0)

        CP   '.'        ;Decimalpunkt?
        JR   NZ,CNV2    ;Nej => CNV2
        EXX             ;Er det det foerste?
        BIT  6,B
        SCF
        JP   NZ,CNV6    ;Nej => FEJL
        SET  6,B        ;Ja => saet flag
        EXX
        JR   CNV1

CNV2:   CP   'E'        ;Exponentnotation?
        JR   Z,CNV4     ;Ja => CNV4

        CALL DIGTST     ;Er det et ciffer?
        JR   NC,CNV5    ;Nej => CNV5

        EX   AF,AF'     ;Gang resultat med 10
        CALL MUL10
        JR   C,CNV6A
        EX   AF,AF'
        EXX             ;Laeg det nye ciffer
        PUSH BC         ;til
        LD   L,A
        LD   H,0
        CALL FLOAT
        CALL FPADD
        EXX
        POP  BC
        JR   C,CNV6A
        BIT  6,B        ;Er decimalflag sat?
        JR   Z,CNV3     ;Nej => CNV3
        DEC  C          ;Traek 1 fra tiexp.
CNV3:   EXX
        JR   CNV1

CNV4:   CALL MFACT      ;Gang med titalsfaktor
        JR   C,CNV6     ;Overflow => CNV6
        EXX
        INC  IX         ;Hent naeste karakter
        LD   A,(IX+0)
        CP   '+'        ;Plus?
        JR   Z,CNV4A    ;Ja => CNV4A
        CP   '-'        ;Minus?
        JR   NZ,CNV4B   ;Nej => CNV4B
        SET  5,B        ;Saet minusflag
CNV4A:  INC  IX

CNV4B:  CALL GDTST      ;Er der et ciffer?
        CCF             ;Saet carry hvis ikke
CNV6A:  JR   C,CNV6     ;Nej => CNV6
        LD   C,A        ;Gem i C
        INC  IX         ;Er der et mere?
        CALL GDTST
        JR   NC,CNV4C   ;Nej => CNV4C

        INC  IX         ;Gang forrige ciffer
        LD   D,A        ;med 10 og laeg det
        LD   A,C        ;nye til
        ADD  A,A
        ADD  A,A
        ADD  A,C
        ADD  A,A
        ADD  A,D
        LD   C,A

CNV4C:  BIT  5,B        ;Negativt?
        JR   Z,CNV4D    ;Nej => CNV4D
        LD   A,C
        NEG
        LD   C,A
CNV4D:  EXX

CNV5:   CALL MFACT      ;Gang med titalsfaktor
        JR   C,CNV6     ;Overflow => CNV6
        EXX             ;Negativt?
        BIT  7,B
        EXX
        JR   Z,CNV6     ;Nej => CNV6
        SET  7,B        ;Saet minusflag i AC

CNV6:   JP   ADD10      ;Hent AC'

;Gang tallet i AC med 10^C'

MFACT:  EXX
        LD   A,C
        ADD  A,EXPN
        CP   -37+EXPN   ;Tiexp.<-37?
        RET  C          ;Ja => Retur
        CP   38+EXPN    ;Tiexp.>37?
        CCF
        RET  C          ;Ja => Retur

        PUSH BC         ;Gem BC
        LD   A,C        ;Hent tiexponent
        CALL TENF       ;Mul. med 10^tiexp.
        EXX             ;Hent BC
        POP  BC
        EXX
        RET

;Saet carry hvis karakteren i A er et ciffer.

GDTST:  LD   A,(IX+0)
DIGTST: SUB  '0'
        CCF
        RET  NC
        CP   10
        RET

;Saet AC lig 1.

AC1:    LD   BC,00000H
        LD   DE,00000H
        LD   HL,00081H
        RET
;------------END OF MATH48------------

.macro __constfp %xx,%yy,%zz
        ld      bc,%xx
        ld      de,%yy
        ld      hl,%zz
.endm

.macro constfp %x
        ld      hl,%x
        call    __atof
.endm

.macro pushfp
        push    bc
        push    de
        push    hl
.endm

.macro popfp
        pop     hl
        pop     de
        pop     bc
.endm

; Load FP at address HL into BCDEHL
__loadfp:
        push    ix
        push    hl
        pop     ix
        ld      l,(ix+0)
        ld      h,(ix+1)
        ld      e,(ix+2)
        ld      d,(ix+3)
        ld      c,(ix+4)
        ld      b,(ix+5)
        pop     ix
        ret

; Store FP into BCDEHL into address HL
__storefp:
        push    ix
        push    hl
        pop     ix
        exx
        ld      (ix+0),l
        ld      (ix+1),h
        ld      (ix+2),e
        ld      (ix+3),d
        ld      (ix+4),c
        ld      (ix+5),b
        pop     ix
        ret

__flteq:
        call    CMP
        jr      z,__flteq1
__flteq0:
        ld      de,0
        ret
__flteq1:
        ld      de,1
        ret

__fltneq:
        call    CMP
        jr      nz,__fltneq1
__fltneq0:
        ld      de,0
        ret
__fltneq1:
        ld      de,1
        ret

__fltlt:
        call    CMP
        jr      c,__fltlt1
__fltlt0:
        ld      de,0
        ret
__fltlt1:
        ld      de,1
        ret

__fltleq:
        call    CMP
        jr      c,__fltleq1
        jr      z,__fltleq1
__fltleq0:
        ld      de,0
        ret
__fltleq1:
        ld      de,1
        ret

__fltpwr2:
        call    EQUAL
        call    FPMUL
        ret

__atof:
        push    ix
        ld      de,hl
        ld      ix,de
        inc     ix
        call    CNVN
        pop     ix
        ret

__ftoa:
        push    ix
        ld      ix,__ftoatmp + 1
        call    FSTRR
        jr      nc,__ftoaok
        ld      hl,__ftoaerr
        pop     ix
        ret
__ftoaok:
        ld      ix,__ftoatmp
        ld      b,255
__ftoalp:
        inc     ix
        inc     b
        ld      a,(ix)
        cp      0
        jr      nz, __ftoalp
        ld      a,b
        ld      (__ftoatmp),a
        ld      hl,__ftoatmp
        pop     ix
        ret
__ftoatmp:
        db 31,  "                                "
__ftoaerr:
        db      5,"ERROR"

__putf:
        exx
        ld      hl,$090d
        exx
        call __ftoa
        call __puts
        ret

__putf_exp:
        exx
        push    bc
        ld      a,c
        cp      $09
        jr      nc,__putf_exp_0
        ld      a,1
        jr      __putf_exp_1
__putf_exp_0:             
        sub     $07
        cp      $0a
        jp      c,__putf_exp_1
        
        ld      a,$09
__putf_exp_1:             
        ld      h,a
        ld      l,$0d
        exx
        call    __ftoa
        pop     bc
        call    __puts_fmt
        ret

__putf_fix:
        exx
        push    de
        ld      a,c
;        cp      $10
;        jp      c,__putf_fix_1
;        ld      a,$0f
__putf_fix_1:
        or      $f0
        ld      h,a
        ld      l,$0a
        exx
        call    __ftoa
        pop     bc
        call    __puts_fmt
        ret

; ========================================================================
; Set support
; ========================================================================

;
; Set membership test
;
; Entry: (SP+2) 32 bytes set, (SP+34) 1 byte element
; Exit:  DE=1 if element in set, 0 otherwise
; Uses:  AF, HL, DE
;
__setin_new:
        ld      hl,34
        ld      d,h
        add     hl,sp       ; HL = sp+32
        ld      e,(hl)
        db      $ed,$94 ; pixelad
        db      $ed,$95 ; setae
        db      $ed,$24 ; mirror
        db      $ed,$34,$00,$c0; add hl,-$4000+2
        add     hl,sp       ; HL = sp+32+bit_offset
        ld      e,d         ; DE = 0 when bit is clear
        and     (hl)
        ret     z
        ld      e,1         ; DE = 1 when bit is set
        ret

; Set index to offset
; Entry E index
; Exit DE offset of byte (D always 0), A correct bit set
__setoff:
        ld      e,a
        srl     e
        srl     e
        srl     e
;        inc     e
;        inc     e
        ld      d,a
        ld      a,1
        bit     0,d
        jr      z,__setoff1
        sla     a
__setoff1:
        bit     1,d
        jr      z,__setoff2
        sla     a
        sla     a
__setoff2:
        bit     2,d
        jr      z,__setoff3
        sla     a
        sla     a
        sla     a
        sla     a
__setoff3:
        ld      d,0
        ret

;
; Set membership test
;
; Entry: (SP+2) 32 bytes set, (SP+34) 1 byte element
; Exit:  DE=1 if element in set, 0 otherwise
; Uses:  AF, HL, DE, BC
;
__setmember:
        ld      hl,34
        add     hl,sp
        ld      a,(hl)
        call    __setoff
        ld      hl,2
        add     hl,de
        ld      de,0
        add     hl,sp
        and     (hl)
        ret     z
        ld      de,1
        ret

__setinclude:
        ld      a,e
        call    __setoff
        add     hl,de
        or      (hl)
        ld      (hl),a
        ret

__setexclude:
        ld      a,e
        call    __setoff
        add     hl,de
        xor     255
        and     (hl)
        ld      (hl),a
        ret

;
; Superset of two sets
;
; Entry: (SP+2) 32 bytes set 2, (SP+34) 32 byte set 1
; Exit:  Result in set 2, SP is unchanged
; Uses:  AF, HL, DE, BC
;
__setadd:
        ld      hl,2
        add     hl,sp
        ld      de,hl
        ld      bc,32
        add     hl,bc
        ld      b,c
__setadd1:
        ld      a,(de)
        or      (hl)
        ld      (hl),a
        inc     hl
        inc     de
        djnz    __setadd1
        ret

;
; Difference of two sets
;
; Entry: (SP+2) 32 bytes set 2, (SP+34) 32 byte set 1
; Exit:  Result in set 1, SP is unchanged
; Uses:  AF, HL, DE, BC
;
__setsub:
        ld      hl,2
        add     hl,sp
        ld      de,hl
        ld      bc,32
        add     hl,bc
        ld      b,c
__setsub1:
        ld      a,(de)
        xor     255
        and     (hl)
        ld      (hl),a
        inc     hl
        inc     de
        djnz    __setsub1
        ret

;
; Intersection of two sets
;
; Entry: (SP+2) 32 bytes set 2, (SP+34) 32 byte set 1
; Exit:  Result in set 1, SP is unchanged
; Uses:  AF, HL, DE, BC
;
__setmul:
        ld      hl,2
        add     hl,sp
        ld      de,hl
        ld      bc,32
        add     hl,bc
        ld      b,c
__setmul1:
        ld      a,(de)
        and     (hl)
        ld      (hl),a
        inc     hl
        inc     de
        djnz    __setmul1
        ret

;
; Set equality test (i.e. set 1 = set 2)
;
; Entry: (SP+2) 32 bytes set 2, (SP+34) 32 byte set 1
; Exit:  DE=1 if equal, 0 otherwise, SP is unchanged
; Uses:  AF, HL, DE, BC
;
__seteq:
        ld      hl,2
        add     hl,sp
        ld      de,hl
        ld      bc,32
        add     hl,bc
        ld      b,c
__seteq1:
        ld      a,(de)
        cp      (hl)
        jr      nz,__seteq2
        inc     hl
        inc     de
        djnz    __seteq1
        ld      de,1
        ret
__seteq2:
        ld      de,0
        ret

;
; Subset-or-equal test (i.e. set 1 <= set 2)
;
; Entry: (SP+2) 32 bytes set 2, (SP+34) 32 byte set 1
; Exit:  DE=1 if set 1 <= set 2, 0 otherwise, SP is unchanged
; Uses:  AF, HL, DE, BC
;
__setleq:
        ld      hl,2
        add     hl,sp
        ld      de,hl
        ld      bc,32
        add     hl,bc
        ld      b,c
__setleq1:
        ld      a,(de)
        ld      c,a
        or      (hl)
        cp      c
        jr      nz,__setleq2
        inc     hl
        inc     de
        djnz    __setleq1
        ld      de,1
        ret
__setleq2:
        ld      de,0
        ret

;
; Superset-or-equal test (i.e. set 1 >= set 2)
;
; Entry: (SP+2) 32 bytes set 2, (SP+34) 32 byte set 1
; Exit:  DE=1 if set 1 >= set 2, 0 otherwise, SP is unchanged
; Uses:  AF, HL, DE, BC
;
__setgeq:
        ld      hl,2
        add     hl,sp
        ld      de,hl
        ld      bc,32
        add     hl,bc
        ex      de,hl           ; Swap arguments
        ld      b,c
        jr      __setleq1       ; Let __setleq do the actual work

; +  ... a := a or b
; -  ... a := a and not b
; *  ... a := a and b

; =  ... a = b
; >= ... a or b = a 
; <= ... a or b = b

; Include shared with in
; Exclude shared with in
                

;
; Print character to screen
;
; Entry:  A (ASCII code)
; Exit:   -
; Uses:   C,E,IY
;
#if defined(CPM)
__putc:
                ld      e,a
                ld      c,2
                call    5
                ret
#endif

#if defined(NXT)
__putc:
                ld      iy,(__saved_iy)
                rst     16
                ret
#endif

;
; Print string to screen
;
; Entry:  HL (string address)
; Exit:   -
; Uses:   AF,BC
;
__puts:         ld      b,(hl)
                inc     b
                jr      __putschk
__putsloop:     ld      a,(hl)
                push    hl
                push    bc
                call    __putc
                pop     bc
                pop     hl
__putschk:      inc     hl
                djnz    __putsloop
                ret

;
; New line
;
; Entry:  -
; Exit:   -
; Uses:   -
;
__newline:
                ld      a,13
                call    __putc
#if defined(CPM)
                ld      a,10
                call    __putc
#endif
                ret

;
; Print number to screen
;
; Entry:  HL (number)
; Exit:   -
; Uses:   AF,BC,DE
;
__strn:         ex      de,hl
                push    hl
                push    af
                ld      hl,__buffer+1
                call    __itoa
                ld      hl,__buffer
                ld      (hl),a
                pop     af
                pop     de
                call    __movestr
                ret

__strn_fmt:
                push    de
                ld      b,a
                push    bc
                call    __strn
                pop     de
                pop     hl
                call    __ralign
                ret

__strc:
                and     a
                ret     z
                ex      de,hl
                ld      (hl),1
                inc     hl
                ld      (hl),e
                ret

__strs:
                ld      hl,2
                add     hl,sp
                call    __movestr
                pop     de
                ld      hl,256
                add     hl,sp
                ld      sp,hl
                push    de
                ret

__strf:
                push    af
                exx
                push    de
                ld      hl,$090d
                exx
                call    __ftoa
                pop     de
                pop     af
                call    __movestr
                ret

__strf2:
        exx
        push    de
        ld      a,c
;        cp      $10
;        jp      c,__putf_fix_1
;        ld      a,$0f
__str_fix_1:
        or      $f0
        ld      h,a
        ld      l,$0a
        exx
        call    __ftoa
        pop     bc
        call    __puts_fmt
        ret

                push    af
                exx
                push    de
                ld      l,$09
                ld      h,c
                set     4,h
                exx
                call    __ftoa
                pop     de
                pop     af
                call    __movestr
                ret

__stre:
                add     hl,bc
                add     hl,bc
                ld      b,(hl)
                inc     hl
                ld      h,(hl)
                ld      l,b
                call    __movestr
                ret

;
; Right-align Pascal string, inserting spaces at the start.
;
; Pre:
;       HL: string address
;       D : maximum string length
;       E : desired string length
; Post:
;       AF / BC / DE / HL changed
;
__ralign:
        ld      a,d
        cp      e               ; Is desired length > maximum length?
        jp      nc,__ralign1
        ld      e,d

__ralign1:
        ld      a,(hl)
        cp      e               ; Do we already have desired length?
        ret     nc

        ld      b,0
        ld      c,a
        ld      a,e
        sub     (hl)
        ld      (hl),e          ; Set new length

        inc     hl
        add     hl,bc           ; Old end of string
        ld      e,a
        ld      d,0
        push    hl
        add     hl,de           ; New end of string
        ex      de,hl
        pop     hl
        inc     bc
        lddr                    ; Move string

        inc     hl
        ld      b,a
        ld      a,32

__ralign2:
        ld      (hl),a          ; Fill with spaces
        inc     hl
        djnz    __ralign2

        ret





;
; Print number to screen
;
; Entry:  HL (number)
; Exit:   -
; Uses:   AF,BC,DE
;
__putn:         ex      hl,de
                ld      hl,__buffer+1
                call    __itoa
                ld      hl,__buffer
                ld      (hl),a
                call    __puts
                ret

;
; Print enum to screen
;
; Entry:  HL (value), DE (literal table)
; Exit:   -
; Uses:   AF,BC,DE
;
__pute:
                add     hl,hl
                add     hl,de
                ld      de,(hl)
                ex      de,hl
                jp      __puts

;
; Formatted output. Similar to normal output, but BC contains field width.
;
__putc_fmt:
                ld      a,l
                ld      hl,__buffer+1
                ld      (hl),a
                dec     hl
                ld      (hl),1
                jp      __puts_fmt

__puts_fmt:
                push    hl
                ld      a,c
                sub     (hl)
                jr      z,__puts_fmt_1
                jr      c,__puts_fmt_1
                ld      b,a
__puts_fmt_loop:
                push    bc
                ld      a, ' '
                call    __putc
                pop     bc
                djnz    __puts_fmt_loop
__puts_fmt_1:
                pop     hl
                jp      __puts

__putn_fmt:     push    bc
                ex      hl,de
                ld      hl,__buffer+1
                call    __itoa
                ld      hl,__buffer
                ld      (hl),a
                pop     bc
                jp      __puts_fmt

__pute_fmt:
                add     hl,hl
                add     hl,de
                ld      de,(hl)
                ex      de,hl
                jp      __puts_fmt

;
; Read number from keyboard
;
; Entry:  -
; Exit:   HL
; Uses:   AF,BC,DE
;
; TODO Separate input from string-to-integer functionality
;
#if defined(CPM)
__getn:         ld      a,'>'
                call    __putc
                ld      hl,6
                ld      (__buffer),hl
                ld      de,__buffer
                ld      c,10
                call    5
                ld      a,'>'
                call    __putc
                ld      hl,__buffer+1
                call    __puts
                ld      hl,__buffer+1
                ld      a,(hl)
                inc     hl
                call    __atoi
                ret
#endif

#if defined(NXT)
__getn:
                push    ix
                ld      iy, (__saved_iy)
                ;    ld      a,1
                ;   rst $18
                ;   defw    $1601
                ld a,'>'
                call __putc
                ld      de,(23633)      ; save current channel
                push    de       
                ld      de,(__win_handle)        ; set current channel to magic window
                ld      (23633), de 
                ld      de,$01c3
                ld      c,7
                exx
                ld      hl,__buffer
                ld      e,0
                ld      a,10
                exx
                rst     8
                db      $94
                pop     bc
                ld      (23633), bc 
                pop ix
                push    de
                pop de
                ld      a,e
                ld      hl,__buffer
                call    __atoi
                ret
#endif

;
; Print assertion failed message
;
; Entry:  HL Source file
;         DE Source line
;         BC Value
; Exit:   -
; Uses:   ?
;
__assert:
                ld      a,c
                and     a
                jr      z,__assert1
                ld      hl,(__assertpassed);
                inc     hl
                ld      (__assertpassed), hl
                ret
__assert1:      push    de
                push    hl
                ld      hl, __assert_msg_1
                call    __puts
                pop     hl
                call    __puts
                ld      hl, __assert_msg_2
                call    __puts
                pop     hl
                call    __putn
                call    __newline
                ld      hl,(__assertfailed)
                inc     hl
                ld      (__assertfailed), hl
                ret
__assert_msg_1: db 24,"*** Assertion failed in "
__assert_msg_2: db 7,", line "

__assertpassed: dw 0
__assertfailed: dw 0

;
; Signed 16 bits integer to string
;
; Entry:  HL (buffer), DE (value)
; Exit:   A (length)
; Uses:   *
;
__itoa:         ld      bc,0
                bit     7,d                
                ex      de,hl
                jr      z,__itoa_loop1
                ex      de,hl
                ld      (hl),'-'
                inc     hl
                inc     c
                push    hl
                ld      hl,0
                and     a
                sbc     hl,de
                pop     de
__itoa_loop1:   push    bc              ; mod 10 and push
                call    __div10
                pop     bc
                add     a,'0'
                push    af
                inc     b
                ld      a,h
                or      l
                jr      nz,__itoa_loop1
                ex      de,hl
__itoa_loop2:   pop     af              ; pop and store
                ld      (hl),a
                inc     hl
                inc     c
                djnz    __itoa_loop2
                ld      a,c
                ret

;
; String to signed 16 bits integer
;
; Entry:    HL (buffer), A (length)
; Exit:     DE (value)
; Uses:     *
;
; TODO Report errors via carry or a register? 
;
__atoi:         ld      de,0
                and     a
                ret     z
                ld      b,a
                ld      a,(hl)
                ld      c,a
                cp      '-'
                jr      z,__atoi_skip   ; Skip minus sign
                cp      '+'
                jr      z,__atoi_skip   ; Skip plus sign
__atoi_loop:    sub     '0'
                jr      c,__atoi_done   ; Not a digit
                cp      10
                jr      nc,__atoi_done  ; Not a digit
                push    hl
                call    __mul10
                ld      l,a
                ld      h,0
                add     hl,de
                ex      hl,de
                pop     hl
__atoi_skip:    inc     hl
                ld      a,(hl)
                djnz    __atoi_loop
__atoi_done:    ld      a,c             ; Fix sign, if necessary
                cp      '-'
                ret     nz
                and     a
                ld      hl,0
                sbc     hl,de
                ex      de,hl
                ret

#if defined(CPM)
__textfg:     ld a,l
              add a,'0'
              ld  (__textfg_str+3),a
              ld hl,__textfg_str
              call  __puts
              ret
__textfg_str: db 3,27,'T',32
#endif

#if defined(NXT)
__textfg:     ld a,l
              ld  (__textfg_str+2),a
              ld hl,__textfg_str
              call  __puts
              ret
__textfg_str: db 2,16,0 ; No good in LAYER 2,1 - needs mapping
#endif

#if defined(CPM)
__textbg:     ld a,l
              add a,'0'
              ld  (__textbg_str+3),a
              ld hl,__textbg_str
              call  __puts
              ret
__textbg_str: db 3,27,'S',32
#endif

#if defined(NXT)
__textbg:     ld a,l
              ld  (__textbg_str+2),a
              ld hl,__textbg_str
              call  __puts
              ret
__textbg_str: db 2,17,0 ; No good in LAYER 2,1 - needs mapping
#endif

#if defined(CPM)
__gotoxy:     ld a,l
              add a,31
              ld  (__gotoxy_str+4),a
              ld a,e
              add a,31
              ld  (__gotoxy_str+3),a
              ld hl,__gotoxy_str
              call  __puts
              ret
__gotoxy_str: db 4,27,'Y',32,32
#endif

#if defined(NXT)
__gotoxy:     ld a,l
              dec   a
              ld  (__gotoxy_str+3),a
              ld a,e
              dec   a
              ld  (__gotoxy_str+2),a
              ld hl,__gotoxy_str
              call  __puts
              ret
__gotoxy_str: db 3,22,0,0
#endif

#if defined(CPM)
__clrscr:     ld hl,__clrscr_str
              call  __puts
              ret
__clrscr_str: db 4,27,'H',27,'J'
#endif

#if defined(NXT)
__clrscr:     ld hl,__clrscr_str
              call  __puts
              ret
__clrscr_str: db 1,14
#endif

#if defined(CPM)
__cursor_on:  ld hl,__cur_on_str
              call  __puts
              ret
__cur_on_str: db 2,27,'e'
#endif

#if defined(NXT)
__cursor_on:  ret
#endif

#if defined(CPM)
__cursor_off: ld hl,__cur_off_str
              call  __puts
              ret
__cur_off_str: db 2,27,'f'
#endif

#if defined(NXT)
__cursor_off: ret
#endif

;
; Poke
;
; Entry:  HL (addr), E (value)
; Exit:   -
; Uses:   -
;
__poke:         ld      (hl),e
                ret


#if defined(LORES)
;
;
;
;
;
;
__pixel_addr:   sla     l
                rr      e
                rr      l
                ld      h,e
                ld      a,h
                cp      $18
                jr      c,__pixel_addr1
                ld      de,$6000
                jr      __pixel_addr2
__pixel_addr1:  ld      de,$4000
__pixel_addr2:  add     hl,de
                ret
;
; Set a pixel in low-res mode
;
; Entry:    HL  x       (0..128)
;           DE  y       (0..95)
;           BC  color   (0..255)
;
__set_pixel:    call    __pixel_addr
                ld      (hl),c
                ret

;
; Get a pixel in LAYER 2,1
;
; Entry:    HL  x       (0..255)
;           DE  y       (0..191)
;
__get_pixel:    call    __pixel_addr
                ld      l,(hl)
                ld      h,0
                ret


#endif

#if defined(HIRES)
__back_buffer:  db      18


__set_frontbuf: ld      a,l
                srl     a
                db      $ed,$92,$12
                ret

__set_backbuf:  ld      a,l
                ld      (__back_buffer),a
                srl     a
                db      $ed,$92,$13

                ret

__wait_vsync:   halt
                ret
;
; Set a pixel in LAYER 2,1
;
; Entry:    HL  x       (0..255)
;           DE  y       (0..191)
;           BC  color   (0..255)
;
__set_pixel:    di
                ld      d,e
                srl     d
                srl     d
                srl     d
                srl     d
                srl     d
                ld      a,(__back_buffer)
                add     a,d

                db      $ed,$92,$56

                ld      a,e
                and     31
                ld      h,a

                ld      de,$c000
                add     hl,de
                ld      (hl),c

                db      $ed,$91,$56,$00

                ei
                ret

;
; Get a pixel in LAYER 2,1
;
; Entry:    HL  x       (0..255)
;           DE  y       (0..191)
;
__get_pixel:    di
                ld      d,e
                srl     d
                srl     d
                srl     d
                srl     d
                srl     d
                ld      a,(__back_buffer)
                add     a,d

                db      $ed,$92,$56

                ld      a,e
                and     31
                ld      h,a

                ld      de,$c000
                add     hl,de
                ld      a,(hl)
                ld      h,0
                ld      l,a

                db      $ed,$91,$56,$00

                ei
                ret


#endif

;__peek:
;__poke:

;__border:
;__setpixel:
;__getpixel:

__heapptr:
        dw      0

; In: HL pointer address, DE size
; Out: -
__getmem:
        push    ix
        push    hl
        call    __malloc
        pop     hl
        ld      a,ixl
        ld      (hl),a
        inc     hl
        ld      a,ixh
        ld      (hl),a
        pop     ix
        ret

; In: DE size
; Out: IX new block
__malloc:
;        db      $dd,01,00,00
        ld      bc,__heapptr
        ld      ix,(__heapptr)
__malloc_loop:
; Null pointer means heap exhausted
        ld      a,ixh
        or      ixl
        jr      z,__malloc_out_of_memory
; Check size of free block
        ld      l,(ix+2)
        ld      h,(ix+3)
        and     a
        sbc     hl,de
        jr      c,__malloc_next
        jr      nz,__malloc_check_larger
; Case 1: Block of exact size found, just remove if from list
        ld      a,(ix+0)
        ld      (bc),a
        inc     bc
        ld      a,(ix+1)
        ld      (bc),a
        ret
; Larger blocks can be split, if at least 4 bytes remain 
__malloc_check_larger:
        ld      a,252
        and     l
        or      h
        jr      z,__malloc_next
; Case 2: Suitable larger block found, split it and adjust pointers
        exx
        ld      c,(ix+0)
        ld      b,(ix+1)
        exx

        push    ix
        add     ix,de
        exx
        ld      (ix+0),c
        ld      (ix+1),b
        exx
        ld      (ix+2),l
        ld      (ix+3),h

        ld      a,ixl
        ld      (bc),a
        inc     bc
        ld      a,ixh
        ld      (bc),a

        pop     ix

        ret
; Try next block
__malloc_next:
        ld      bc,ix
        exx
        ld      e,(ix+0)
        ld      d,(ix+1)
        ld      ix,de
        exx
        jp      __malloc_loop
; Display error message and freeze
__malloc_out_of_memory:
        ld      hl,__malloc_error_message
        call    __puts
__malloc_infinite_loop:
        jp      __malloc_infinite_loop
__malloc_error_message:
        db      13,'Out of memory'

; In: HL pointer, DE size
__freemem:
;        db      $dd,01,00,00
        ld      bc,(__heapptr)
        ld      (hl),c
        inc     hl
        ld      (hl),b
        inc     hl
        ld      (hl),e
        inc     hl
        ld      (hl),d
        dec     hl
        dec     hl
        dec     hl
        ld      (__heapptr),hl
        ret

__get_heap_start:
                ld      hl, eof
                ret

__get_heap_bytes:
                ld      hl, 57344
                ld      de, eof
                and     a
                sbc     hl,de
                ret

;
; Startup (with some help from Melissa O'Neill for NXT case)
;
; Entry: -
; Exit: -
; Uses: *
;
#if defined(CPM)
__init:         ret
#endif

#if defined(NXT)
__init:         ld      (__saved_iy),iy
                ld      de, $01d5
                ld      a,1
                exx
#if defined(LORES)
                ld      bc,$0100
#endif
#if defined(HIRES)
                ld      bc,$0201
#endif
                exx
                ld      c,7
                rst     $08
                db      $94
                exx
                ld   (__win_handle),hl
                exx
                ret
#endif

;
; Shutdown
;
; Entry: -
; Exit: -
; Uses: *
;
#if defined(CPM)
__done:         ret
#endif

#if defined(NXT)
__done:         ld      iy,(__saved_iy)
                ret
#endif
; 
                jp      main
; 
; [0] (* Built-ins that do not have to be defined in the compiler itself. *)
; [1] 
; [2] type
; [3]   PBlock = ^TBlock;
; [4]   TBlock = record
; [5]     Next: PBlock;
; [6]     Size: Integer;
; [7]   end;
; [8] 
; [9] var
; [10]   HeapPtr: PBlock absolute '__heapptr';
; [11] 
; [12]   AssertPassed: Integer absolute '__assertpassed';
; [13]   AssertFailed: Integer absolute '__assertfailed';
; [14] 
; [15] procedure FreeMem(P: Pointer; Size: Integer); register; external '__freemem';
; [16] (*var
; [17]   Q: PBlock;
; [18] begin
; [19]   Q := P;
; [20]   Q^.Size := Size;
; [21]   Q^.Next := HeapPtr;
; [22]   HeapPtr := Q;
; [23]   P := nil;
; [24] end;
; [25] *)
; [26] 
; [27] procedure GetMem(var P: Pointer; Size: Integer); register; external '__getmem';
; 
; [28] (*var
; [29]   Q, R: PBlock;
; [30] begin
; [31]   Q := nil;
; [32]   R := HeapPtr;
; [33]   while R <> nil do
; [34]   begin
; [35]     if R^.Size = Size then
; [36]     begin
; [37]       if Q = nil then
; [38]         HeapPtr := R^.Next
; [39]       else
; [40]         Q^.Next := R^.Next;
; [41] 
; [42]       P := R;
; [43] 
; [44]       Exit;
; [45]     end
; [46]     else if R^.Size >= Size + 4 then
; [47]     begin
; [48]       if Q = nil then
; [49]       begin
; [50]         HeapPtr := Ptr(Ord(R) + Size);
; [51]         HeapPtr^.Size := R^.Size - Size;
; [52]         HeapPtr^.Next := R^.Next;
; [53]       end
; [54]       else
; [55]       begin
; [56]         Q^.Next := Ptr(Ord(R) + Size);
; [57]         Q^.Next^.Size := R^.Size - Size;
; [58]         Q^.Next^.Next := R^.Next;
; [59]       end;
; [60] 
; [61]       P := R;
; [62] 
; [63]       Exit;
; [64]     end;
; [65] 
; [66]     Q := R;
; [67]     R := R^.Next;
; [68]   end;
; [69] 
; [70]   WriteLn('Out of memory error');
; [71]   while True do;
; [72] end;
; [73] *)
; [74] procedure InitHeap(Bytes: Integer);
; 
; [75] var
; [76]   P: Pointer;
; [77] begin
; var Bytes(+6), P(-2)
; 
proc2:          push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-2
                add     hl,sp
                ld      sp,hl
; [78]   HeapPtr := nil;
                ld      hl,__heapptr    ; Get global HeapPtr
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
; [79]   P := Ptr(32768); (* GetHeapStart; *)
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,32768        ; Literal 32768
                pop     hl
                ld      (hl),de
; [80]   FreeMem(P, Bytes);
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __freemem
; [81] end;
exit3:          ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [82] 
; [83] function MemAvail: Integer;
; 
; [84] var
; [85]   P: PBlock;
; [86]   I: Integer;
; [87] begin
; var MemAvail(+6), P(-2), I(-4)
; 
func4:          push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-4
                add     hl,sp
                ld      sp,hl
; [88]   P := HeapPtr;
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      hl,__heapptr    ; Get global HeapPtr
                ld      de,(hl)
                pop     hl
                ld      (hl),de
; [89]   I := 0;
                ld      de,ix
                ld      hl,-4
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
; [90]   while P <> nil do
while6:
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                call    __int16_neq
                ld      h,0
                ld      l,a
                push    hl
; [91]   begin
                pop     hl
                bit     0,l
                jp      z,false7
; [92]     I := I + P^.Size;
                ld      de,ix
                ld      hl,-4
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-4
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,2            ; Literal 2
                pop     hl
                add     hl,de
                ld      de,(hl)
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
; [93]     P := P^.Next;
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
; [94]   end;
                jp      while6
false7:
; [95] 
; [96]   MemAvail := I;
                ld      de,ix
                ld      hl,6
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-4
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
; [97] end;
exit5:          ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [98] 
; [99] function MaxAvail: Integer;
; 
; [100] var
; [101]   P: PBlock;
; [102]   I: Integer;
; [103] begin
; var MaxAvail(+6), P(-2), I(-4)
; 
func8:          push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-4
                add     hl,sp
                ld      sp,hl
; [104]   P := HeapPtr;
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      hl,__heapptr    ; Get global HeapPtr
                ld      de,(hl)
                pop     hl
                ld      (hl),de
; [105]   I := 0;
                ld      de,ix
                ld      hl,-4
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
; [106]   while P <> nil do
while10:
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                call    __int16_neq
                ld      h,0
                ld      l,a
                push    hl
; [107]   begin
                pop     hl
                bit     0,l
                jp      z,false11
; [108]     if P^.Size > I then I := P^.Size;
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,2            ; Literal 2
                pop     hl
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,-4
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,false12
                ld      de,ix
                ld      hl,-4
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,2            ; Literal 2
                pop     hl
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
false12:
; [109]     P := P^.Next;
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      e,(hl)
                inc     hl
                ld      d,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
; [110]   end;
                jp      while10
false11:
; [111] 
; [112]   MaxAvail := I;
                ld      de,ix
                ld      hl,6
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-4
                add     hl,de
                ld      de,(hl)
                pop     hl
                ld      (hl),de
; [113] end;
exit9:          ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [114] 
; [115] type
; 
; [116]   TString = String[255];
; [117] 
; [118] function Random(Range: Integer): Integer; register; external '__random';
; [119] 
; [120] function Length(S: TString): Integer; stdcall; external '__length';
; 
; [121] function Concat(S, T: TString): TString; stdcall; external '__concat';
; 
; [122] function Pos(S, T: TString): Integer; stdcall; external '__pos';
; 
; [123] function Copy(S: TString; Start: Integer; Count: Integer): TString; stdcall; external '__copy';
; 
; [124] procedure Insert(S: TString; var T: TString; Start: Integer); stdcall; external '__insert';
; 
; [125] procedure Delete(var S: TString; Start: Integer; Count: Integer); stdcall; external '__delete';
; 
; [126] 
; [127] {
; [128]   procedure Val(S: TString; var I, Code: Integer); stdcall; external '__val_int';
; [129] procedure Str(I: Integer; var S: TString); stdcall; external '__str_int';
; [130] }
; [131] 
; [132] procedure ClrScr; register; external '__clrscr';
; 
; [133] procedure GotoXY(X, Y: Integer); register; external '__gotoxy';
; 
; [134] procedure TextColor(I: Integer); register; external '__textfg';
; 
; [135] procedure TextBackground(I: Integer); register; external '__textbg';
; 
; [136] procedure CursorOn; register; external '__cursor_on';
; 
; [137] procedure CursorOff; register; external '__cursor_off';
; 
; [138] 
; [139] (* Arithmetic functions *)
; [140] 
; [141] (* function Abs(I: Integer): Integer  *) (* built-in *)
; [142] (* function Abs(R: Real): Real        *) (* built-in *)
; [143] function ArcTan(R: Real): Real; register; external 'ATN';
; 
; [144] function Cos(R: Real): Real; register; external 'COS';
; 
; [145] function Exp(R: Real): Real; register; external 'EXP';
; 
; [146] function Frac(R: Real): Real; register; external 'FRAC';
; 
; [147] function Int(R: Real): Real; register; external 'INT';
; 
; [148] function Ln(R: Real): Real; register; external 'LN';
; 
; [149] function Log(R: Real): Real; register; external 'LOG';
; 
; [150] function Pi: Real; register; external 'ACPI';
; 
; [151] function Sin(R: Real): Real; register; external 'SIN';
; 
; [152] function Sqr(R: Real): Real; register; external '__fltpwr2';
; 
; [153] function Sqrt(R: Real): Real; register; external 'SQR';
; 
; [154] function Tan(R: Real): Real; register; external 'TAN';
; 
; [155] 
; [156] (* Scalar functions *
; [157] 
; [158] (* Pred, Succ, Odd *)
; [159] 
; [160] (* Transfer functions *)
; [161] 
; [162] (* Chr, Ord, Round, Trunc *)
; [163] 
; [164] (* Miscellaneous functions *)
; [165] 
; [166] (* 
; [167]   Hi ld l,h, ld h,0
; [168]   KeyPressed
; [169]   Lo ld h,0
; [170]   Random
; [171]   Random(I)
; [172]   ParamCount
; [173]   ParamStr
; [174]   SizeOf ok
; [175]   Swap ld a,h, ld h,l, ld l,a
; [176]   UpCase  -> lib z80
; [177] *)
; [0] program TreeTop;
; 
; [1] 
; [2] {$I /Users/joerg/Projekte/pl0/lib/Files.pas}
; [0] type
; [1]   FileControlBlock = record
; [2]     DR: Byte;
; [3]     FN: array[0..7] of Char;
; [4]     TN: array[0..2] of Char;
; [5]     EX, S1, S2, RC: Byte;
; [6]     AL: array[0..15] of Byte;
; [7]     CR: Byte;
; [8]     RN: array[0..2] of Byte;
; [9]   end;
; [10] 
; [11]   Text = record
; [12]     Offset: Integer;
; [13]     Writing: Boolean;
; [14]     FCB: FileControlBlock;
; [15]     DMA: array[0..127] of Char;
; [16]   end;
; [17] 
; [18] procedure Assign(var T: Text; S: TString);
; [19] var
; [20]   I: Integer;
; [21] begin
; var T(+262), S(+6), I(-2)
; 
proc38:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-2
                add     hl,sp
                ld      sp,hl
; [22]   T.FCB.DR := 0;
                ld      de,ix
                ld      hl,262
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [23] 
; [24]   for I := 1 to 8 do
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,1            ; Literal 1
                pop     hl
                ld      (hl),de
                ld      de,8            ; Literal 8
                push    de
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak41
forloop40:
; [25]     T.FCB.FN[I - 1] := S[I];
                ld      de,ix
                ld      hl,262
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,1            ; Literal 1
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                pop     hl
                add     hl,de
                ld      d,0
                ld      e,(hl)
                pop     hl
                ld      (hl),e
fornext42:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak41
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop40
forbreak41:     pop     de              ; Cleanup limit
; [26] 
; [27]   for I := 10 to 12 do
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,10           ; Literal 10
                pop     hl
                ld      (hl),de
                ld      de,12           ; Literal 12
                push    de
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak44
forloop43:
; [28]     T.FCB.TN[I - 10] := S[I];
                ld      de,ix
                ld      hl,262
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,9            ; Literal 9
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,10           ; Literal 10
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                pop     hl
                add     hl,de
                ld      d,0
                ld      e,(hl)
                pop     hl
                ld      (hl),e
fornext45:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak44
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop43
forbreak44:     pop     de              ; Cleanup limit
; [29] end;
exit39:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [30] 
; [31] procedure Reset(var T: Text);
; 
; [32] var
; [33]   A: Integer;
; [34] begin
; var T(+6), A(-2)
; 
proc46:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-2
                add     hl,sp
                ld      sp,hl
; [35]   T.FCB.EX := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,12           ; Literal 12
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [36]   T.FCB.S1 := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,13           ; Literal 13
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [37]   T.FCB.S2 := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,14           ; Literal 14
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [38]   T.FCB.RC := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,15           ; Literal 15
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [39]   T.FCB.CR := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,32           ; Literal 32
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [40] 
; [41]   T.Writing := False;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,2            ; Literal 2
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [42] 
; [43]   A := Bdos(15, Addr(T.FCB));
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,15           ; Literal 15
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                push    ix
                ld      c,l
                call    5
                pop     ix
                ld      l,a
                ld      h,0
                ld      de,hl
                pop     hl
                ld      (hl),de
; [44] 
; [45]   T.Offset := 128;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                push    hl
                ld      de,128          ; Literal 128
                pop     hl
                ld      (hl),de
; [46] end;
exit47:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [47] 
; [48] procedure Rewrite(var T: Text);
; 
; [49] var
; [50]   A: Integer;
; [51] begin
; var T(+6), A(-2)
; 
proc48:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-2
                add     hl,sp
                ld      sp,hl
; [52]   T.FCB.EX := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,12           ; Literal 12
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [53]   T.FCB.S1 := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,13           ; Literal 13
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [54]   T.FCB.S2 := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,14           ; Literal 14
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [55]   T.FCB.RC := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,15           ; Literal 15
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [56]   T.FCB.CR := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                push    hl
                ld      de,32           ; Literal 32
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),e
; [57] 
; [58]   T.Writing := True;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,2            ; Literal 2
                pop     hl
                add     hl,de
                push    hl
                ld      de,1            ; Literal 1
                pop     hl
                ld      (hl),e
; [59] 
; [60]   A := Bdos(19, Addr(T.FCB));
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,19           ; Literal 19
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                push    ix
                ld      c,l
                call    5
                pop     ix
                ld      l,a
                ld      h,0
                ld      de,hl
                pop     hl
                ld      (hl),de
; [61]   A := Bdos(22, Addr(T.FCB));
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,22           ; Literal 22
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                push    ix
                ld      c,l
                call    5
                pop     ix
                ld      l,a
                ld      h,0
                ld      de,hl
                pop     hl
                ld      (hl),de
; [62] 
; [63]   T.Offset := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
; [64] end;
exit49:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [65] 
; [66] procedure ReadRec(var T: Text);
; 
; [67] var
; [68]   A: Integer;
; [69] begin
; var T(+6), A(-2)
; 
proc50:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-2
                add     hl,sp
                ld      sp,hl
; [70]   A := Bdos(26, Addr(T.DMA));
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,26           ; Literal 26
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,39           ; Literal 39
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                push    ix
                ld      c,l
                call    5
                pop     ix
                ld      l,a
                ld      h,0
                ld      de,hl
                pop     hl
                ld      (hl),de
; [71]   A := Bdos(20, Addr(T.FCB));
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,20           ; Literal 20
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                push    ix
                ld      c,l
                call    5
                pop     ix
                ld      l,a
                ld      h,0
                ld      de,hl
                pop     hl
                ld      (hl),de
; [72]   T.Offset := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
; [73] end;
exit51:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [74] 
; [75] function ReadChar(var T: Text): Char;
; 
; [76] var
; [77]   C: Char;
; [78] begin
; var ReadChar(+8), T(+6), C(-2)
; 
func52:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-2
                add     hl,sp
                ld      sp,hl
; [79]   if T.Offset > 127 then ReadRec(T);
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,127          ; Literal 127
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,false54
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                call    proc50
; Cleanup 2 bytes
                pop     hl
false54:
; [80]   C := T.DMA[T.Offset];
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,39           ; Literal 39
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                pop     hl
                add     hl,de
                ld      d,0
                ld      e,(hl)
                pop     hl
                ld      (hl),e
; [81]   if C <> #26 then T.Offset := T.Offset + 1;
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      d,0
                ld      e,(hl)
                push    de
                ld      de,26           ; Literal 26
                pop     hl
                call    __int16_neq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,false55
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
false55:
; [82]   ReadChar := C;
                ld      de,ix
                ld      hl,8
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      d,0
                ld      e,(hl)
                pop     hl
                ld      (hl),e
; [83] end;
exit53:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [84] 
; [85] procedure ReadLine(var T: Text; var S: TString);
; 
; [86] var
; [87]   C: Char;
; [88] begin
; var T(+8), S(+6), C(-2)
; 
proc56:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-2
                add     hl,sp
                ld      sp,hl
; [89]   S := '';
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      hl,string58
                pop     de
                ld      a,255
                call    __movestr
; [90] 
; [91]   while Length(S) < 255 do
while59:
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                call    __loadstr
                call    __length
; Cleanup 256 bytes
                ld      hl,256          ; Clear
                add     hl,sp
                ld      sp,hl
                ld      de,255          ; Literal 255
                pop     hl
                call    __int16_lt
                ld      h,0
                ld      l,a
                push    hl
; [92]   begin
                pop     hl
                bit     0,l
                jp      z,false60
; [93]     C := ReadChar(T);
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                push    hl
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                push    de
                call    func52
; Cleanup 2 bytes
                pop     hl
                pop     de
                pop     hl
                ld      (hl),e
; [94] 
; [95]     if C = #10 then Break;
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      d,0
                ld      e,(hl)
                push    de
                ld      de,10           ; Literal 10
                pop     hl
                call    __int16_eq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,false61
                jp      false60         ; Break
false61:
; [96]     if C = #26 then Break;
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      d,0
                ld      e,(hl)
                push    de
                ld      de,26           ; Literal 26
                pop     hl
                call    __int16_eq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,false62
                jp      false60         ; Break
false62:
; [97] 
; [98]     if C >= ' ' then S := S + C;
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      d,0
                ld      e,(hl)
                push    de
                ld      de,32           ; Literal 32
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,false63
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                call    __loadstr
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      d,0
                ld      e,(hl)
                ld      hl,-254
                add     hl,sp
                ld      sp,hl
                ld      d,e
                ld      e,1
                push    de
                call    __stradd
                ld      hl,256          ; Clear
                add     hl,sp
                ld      sp,hl
                ld      a,255
                call    __storestr
false63:
; [99]   end;
                jp      while59
false60:
; [100] end;
exit57:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [101] 
; [102] procedure WriteRec(var T: Text);
; 
; [103] var
; [104]   A: Integer;
; [105] begin
; var T(+6), A(-2)
; 
proc64:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-2
                add     hl,sp
                ld      sp,hl
; [106]   A := Bdos(26, Addr(T.DMA));
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,26           ; Literal 26
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,39           ; Literal 39
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                push    ix
                ld      c,l
                call    5
                pop     ix
                ld      l,a
                ld      h,0
                ld      de,hl
                pop     hl
                ld      (hl),de
; [107]   A := Bdos(21, Addr(T.FCB));
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,21           ; Literal 21
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                push    ix
                ld      c,l
                call    5
                pop     ix
                ld      l,a
                ld      h,0
                ld      de,hl
                pop     hl
                ld      (hl),de
; [108]   T.Offset := 0;
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
; [109] end;
exit65:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [110] 
; [111] 
; [112] procedure WriteChar(var T: Text; C: Char);
; 
; [113] begin
; var T(+8), C(+6)
; 
proc66:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,0
                add     hl,sp
                ld      sp,hl
; [114]   if T.Offset > 127 then WriteRec(T);
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,127          ; Literal 127
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,false68
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                push    de
                call    proc64
; Cleanup 2 bytes
                pop     hl
false68:
; [115]   T.DMA[T.Offset] := C;
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,39           ; Literal 39
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      d,0
                ld      e,(hl)
                pop     hl
                ld      (hl),e
; [116]   T.Offset := T.Offset + 1;
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
; [117] end;
exit67:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [118] 
; [119] procedure WriteLine(var T: Text; S: TString);
; 
; [120] var
; [121]   I: Integer;
; [122] begin
; var T(+262), S(+6), I(-2)
; 
proc69:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-2
                add     hl,sp
                ld      sp,hl
; [123]   for I := 1 to Length(S) do WriteChar(T, S[I]);
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,1            ; Literal 1
                pop     hl
                ld      (hl),de
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                call    __loadstr
                call    __length
; Cleanup 256 bytes
                ld      hl,256          ; Clear
                add     hl,sp
                ld      sp,hl
                pop     de              ; Dup and pre-check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak72
forloop71:
                ld      de,ix
                ld      hl,262
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                pop     hl
                add     hl,de
                ld      d,0
                ld      e,(hl)
                push    de
                call    proc66
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
fornext73:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak72
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop71
forbreak72:     pop     de              ; Cleanup limit
; [124] 
; [125]   WriteChar(T, #13);
                ld      de,ix
                ld      hl,262
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,13           ; Literal 13
                push    de
                call    proc66
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
; [126]   WriteChar(T, #10);
                ld      de,ix
                ld      hl,262
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,10           ; Literal 10
                push    de
                call    proc66
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
; [127] end;
exit70:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [128] 
; [129] function IsEof(var T: Text): Boolean;
; 
; [130] begin
; var IsEof(+8), T(+6)
; 
func74:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,0
                add     hl,sp
                ld      sp,hl
; [131]   if T.Offset > 127 then ReadRec(T);
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,127          ; Literal 127
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,false76
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                call    proc50
; Cleanup 2 bytes
                pop     hl
false76:
; [132]   IsEof := T.DMA[T.Offset] = #26;
                ld      de,ix
                ld      hl,8
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,39           ; Literal 39
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                pop     hl
                add     hl,de
                ld      de,(hl)
                pop     hl
                add     hl,de
                ld      d,0
                ld      e,(hl)
                push    de
                ld      de,26           ; Literal 26
                pop     hl
                call    __int16_eq
                ld      h,0
                ld      l,a
                ld      de,hl
                pop     hl
                ld      (hl),e
; [133] end;        
exit75:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [134] 
; [135] procedure Close(var T: Text);
; 
; [136] var
; [137]   A: Integer;
; [138] begin
; var T(+6), A(-2)
; 
proc77:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-2
                add     hl,sp
                ld      sp,hl
; [139]   if T.Writing then
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,2            ; Literal 2
                pop     hl
                add     hl,de
                ld      d,0
                ld      e,(hl)
                push    de
; [140]   begin
                pop     hl
                bit     0,l
                jp      z,false79
; [141]     WriteChar(T, #26);
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,26           ; Literal 26
                push    de
                call    proc66
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
; [142]     WriteRec(T);
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                call    proc64
; Cleanup 2 bytes
                pop     hl
; [143]   end;
false79:
; [144] 
; [145]   A := Bdos(16, Addr(T.FCB));
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,16           ; Literal 16
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,3            ; Literal 3
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                push    ix
                ld      c,l
                call    5
                pop     ix
                ld      l,a
                ld      h,0
                ld      de,hl
                pop     hl
                ld      (hl),de
; [146] end;
exit78:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [3] 
; [4] var
; 
; [5]   Map: array[0..99] of array[0..99] of Char;
global80:       ds      10000           ; Global Map
; [6]   Size: Integer;
global81:       ds      2               ; Global Size
; [7] 
; [8] procedure Load;
; [9] var
; [10]   T: Text;
; [11]   S: TString;
; [12]   I, J: Integer;
; [13] begin
; var T(-167), S(-423), I(-425), J(-427)
; 
proc82:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-427
                add     hl,sp
                ld      sp,hl
; [14]   WriteLn('           '#27'p    Loading     '#27'q');
                ld      hl,string84
                call    __puts
                call    __newline
; [15]   WriteLn;
                call    __newline
; [16] 
; [17]   Assign(T, 'INPUT   .TXT');
                ld      de,ix
                ld      hl,-167
                add     hl,de
                push    hl
                ld      hl,string85
                call    __loadstr
                call    proc38
; Cleanup 2 bytes
                pop     hl
; Cleanup 256 bytes
                ld      hl,256          ; Clear
                add     hl,sp
                ld      sp,hl
; [18]   Reset(T);
                ld      de,ix
                ld      hl,-167
                add     hl,de
                push    hl
                call    proc46
; Cleanup 2 bytes
                pop     hl
; [19] 
; [20]   ReadLine(T, S);
                ld      de,ix
                ld      hl,-167
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-423
                add     hl,de
                push    hl
                call    proc56
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
; [21]   Size := Length(S);
                ld      hl,global81     ; Get global Size
                push    hl
                push    hl
                ld      de,ix
                ld      hl,-423
                add     hl,de
                call    __loadstr
                call    __length
; Cleanup 256 bytes
                ld      hl,256          ; Clear
                add     hl,sp
                ld      sp,hl
                pop     de
                pop     hl
                ld      (hl),de
; [22] 
; [23]   for I := 0 to Size - 1 do
                ld      de,ix
                ld      hl,-425
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
                ld      hl,global81     ; Get global Size
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                push    de
                push    de
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak87
forloop86:
; [24]   begin
; [25]     Write('.');
                ld      de,46           ; Literal 46
                ld      hl,de
                ld      a,l
                call    __putc
; [26]     if I mod 33 = 32 then WriteLn((I + 1) * 100 / Size:4, '%');
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,33           ; Literal 33
                pop     hl
                call    __sdiv16        ; Mod
                ex      hl,de
                push    hl
                ld      de,32           ; Literal 32
                pop     hl
                call    __int16_eq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,false89
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                add     hl,de
                push    hl
                ld      de,100          ; Literal 100
                pop     hl
                call    __mul16         ; Mul
                push    hl
                ld      hl,global81     ; Get global Size
                ld      de,(hl)
                pop     hl
                call    __sdiv16        ; Div
                push    hl
                ld      de,4            ; Literal 4
                ld      bc,de
                pop     hl
                call    __putn_fmt
                ld      de,37           ; Literal 37
                ld      hl,de
                ld      a,l
                call    __putc
                call    __newline
false89:
; [27]     for J := 0 to Size - 1 do
                ld      de,ix
                ld      hl,-427
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
                ld      hl,global81     ; Get global Size
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                push    de
                push    de
                ld      de,ix
                ld      hl,-427
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak91
forloop90:
; [28]       Map[I][J] := S[J + 1];
                ld      hl,global80     ; Get global Map
                push    hl
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,100          ; Literal 100
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-427
                add     hl,de
                ld      de,(hl)
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-423
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-427
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                add     hl,de
                ld      d,0
                ld      e,(hl)
                pop     hl
                ld      (hl),e
fornext92:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-427
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak91
                ld      de,ix
                ld      hl,-427
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop90
forbreak91:     pop     de              ; Cleanup limit
; [29] 
; [30]     ReadLine(T, S);
                ld      de,ix
                ld      hl,-167
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-423
                add     hl,de
                push    hl
                call    proc56
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
; [31]   end;
fornext88:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak87
                ld      de,ix
                ld      hl,-425
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop86
forbreak87:     pop     de              ; Cleanup limit
; [32]         
; [33]   Close(T);
                ld      de,ix
                ld      hl,-167
                add     hl,de
                push    hl
                call    proc77
; Cleanup 2 bytes
                pop     hl
; [34] 
; [35]   WriteLn;
                call    __newline
; [36] end;
exit83:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [37] 
; [38] procedure CheckTree(Row, Column: Integer; var Visible: Integer; var Score: Real);
; 
; [39] var
; [40]   Left, Right, Top, Bottom: Integer;
; [41]   Height: Char;
; [42] begin
; var Row(+12), Column(+10), Visible(+8), Score(+6), Left(-2), Right(-4), Top(-6), Bottom(-8), Height(-10)
; 
proc93:         push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-10
                add     hl,sp
                ld      sp,hl
; [43]   Height := Map[Row][Column];
                ld      de,ix
                ld      hl,-10
                add     hl,de
                push    hl
                ld      hl,global80     ; Get global Map
                push    hl
                ld      de,ix
                ld      hl,12
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,100          ; Literal 100
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,10
                add     hl,de
                ld      de,(hl)
                pop     hl
                add     hl,de
                ld      d,0
                ld      e,(hl)
                pop     hl
                ld      (hl),e
; [44] 
; [45]   Visible := 4;
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,4            ; Literal 4
                pop     hl
                ld      (hl),de
; [46] 
; [47]   for Left := Column - 1 downto 0 do
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,10
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
                ld      de,0            ; Literal 0
                push    de
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak96
forloop95:
; [48]   begin
; [49]     if Map[Row][Left] >= Height then
                ld      hl,global80     ; Get global Map
                push    hl
                ld      de,ix
                ld      hl,12
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,100          ; Literal 100
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                pop     hl
                add     hl,de
                ld      d,0
                ld      e,(hl)
                push    de
                ld      de,ix
                ld      hl,-10
                add     hl,de
                ld      d,0
                ld      e,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                push    hl
; [50]     begin
                pop     hl
                bit     0,l
                jp      z,false98
; [51]       Visible := Visible - 1;
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
; [52]       Break;
                jp      forbreak96      ; Break
; [53]     end;
false98:
; [54]   end;
fornext97:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak96
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                dec     de
                ld      (hl),de
                jp      forloop95
forbreak96:     pop     de              ; Cleanup limit
; [55] 
; [56]   for Right := Column + 1 to Size - 1 do
                ld      de,ix
                ld      hl,-4
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,10
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
                ld      hl,global81     ; Get global Size
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                push    de
                push    de
                ld      de,ix
                ld      hl,-4
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak100
forloop99:
; [57]   begin
; [58]     if Map[Row][Right] >= Height then
                ld      hl,global80     ; Get global Map
                push    hl
                ld      de,ix
                ld      hl,12
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,100          ; Literal 100
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-4
                add     hl,de
                ld      de,(hl)
                pop     hl
                add     hl,de
                ld      d,0
                ld      e,(hl)
                push    de
                ld      de,ix
                ld      hl,-10
                add     hl,de
                ld      d,0
                ld      e,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                push    hl
; [59]     begin
                pop     hl
                bit     0,l
                jp      z,false102
; [60]       Visible := Visible - 1;
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
; [61]       Break;
                jp      forbreak100     ; Break
; [62]     end;
false102:
; [63]   end;
fornext101:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-4
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak100
                ld      de,ix
                ld      hl,-4
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop99
forbreak100:    pop     de              ; Cleanup limit
; [64] 
; [65]   for Top := Row - 1 downto 0 do
                ld      de,ix
                ld      hl,-6
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,12
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
                ld      de,0            ; Literal 0
                push    de
                push    de
                ld      de,ix
                ld      hl,-6
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak104
forloop103:
; [66]   begin
; [67]     if Map[Top][Column] >= Height then
                ld      hl,global80     ; Get global Map
                push    hl
                ld      de,ix
                ld      hl,-6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,100          ; Literal 100
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,10
                add     hl,de
                ld      de,(hl)
                pop     hl
                add     hl,de
                ld      d,0
                ld      e,(hl)
                push    de
                ld      de,ix
                ld      hl,-10
                add     hl,de
                ld      d,0
                ld      e,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                push    hl
; [68]     begin
                pop     hl
                bit     0,l
                jp      z,false106
; [69]       Visible := Visible - 1;
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
; [70]       Break;
                jp      forbreak104     ; Break
; [71]     end;
false106:
; [72]   end;
fornext105:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-6
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak104
                ld      de,ix
                ld      hl,-6
                add     hl,de
                ld      de,(hl)
                dec     de
                ld      (hl),de
                jp      forloop103
forbreak104:    pop     de              ; Cleanup limit
; [73] 
; [74]   for Bottom := Row + 1 to Size - 1 do
                ld      de,ix
                ld      hl,-8
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,12
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
                ld      hl,global81     ; Get global Size
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                push    de
                push    de
                ld      de,ix
                ld      hl,-8
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak108
forloop107:
; [75]   begin
; [76]     if Map[Bottom][Column] >= Height then
                ld      hl,global80     ; Get global Map
                push    hl
                ld      de,ix
                ld      hl,-8
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,100          ; Literal 100
                pop     hl
                call    __mul16         ; Mul
                ld      de,hl
                pop     hl
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,10
                add     hl,de
                ld      de,(hl)
                pop     hl
                add     hl,de
                ld      d,0
                ld      e,(hl)
                push    de
                ld      de,ix
                ld      hl,-10
                add     hl,de
                ld      d,0
                ld      e,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                push    hl
; [77]     begin
                pop     hl
                bit     0,l
                jp      z,false110
; [78]       Visible := Visible - 1;
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,8
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
; [79]       Break;
                jp      forbreak108     ; Break
; [80]     end;
false110:
; [81]   end;
fornext109:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-8
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak108
                ld      de,ix
                ld      hl,-8
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop107
forbreak108:    pop     de              ; Cleanup limit
; [82] 
; [83]   Score := (Column - Left) * (Right - Column);
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,10
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                pop     hl
                xor     a
                sbc     hl,de
                push    hl
                ld      de,ix
                ld      hl,-4
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,10
                add     hl,de
                ld      de,(hl)
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                pop     hl
                call    __mul16         ; Mul
                call    FLOAT
                exx
                pop     hl
                call    __storefp
; [84]   Score := Score * (Row - Top) * (Bottom - Row);
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,6
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                call    __loadfp
                pushfp
        push    bc
        push    de
        push    hl
                ld      de,ix
                ld      hl,12
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,-6
                add     hl,de
                ld      de,(hl)
                pop     hl
                xor     a
                sbc     hl,de
                push    hl
                ld      de,ix
                ld      hl,-8
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,12
                add     hl,de
                ld      de,(hl)
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                pop     hl
                call    __mul16         ; Mul
                call    FLOAT
                exx
                popfp
        pop     hl
        pop     de
        pop     bc
                call    FPMUL
                exx
                pop     hl
                call    __storefp
; [85] end;
exit94:         ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [86] 
; [87] procedure Process;
; 
; [88] var
; [89]   I, J, Trees, Visible: Integer;
; [90]   Score, Best: Real;
; [91] begin
; var I(-2), J(-4), Trees(-6), Visible(-8), Score(-14), Best(-20)
; 
proc111:        push    ix              ; Prologue
                ld      hl,(display+4)
                push    hl
                ld      ix,0
                add     ix,sp
                ld      (display+4),ix
                ld      hl,-20
                add     hl,sp
                ld      sp,hl
; [92]   WriteLn('           '#27'p   Processing   '#27'q');
                ld      hl,string113
                call    __puts
                call    __newline
; [93]   WriteLn;
                call    __newline
; [94] 
; [95]   Trees := 0;
                ld      de,ix
                ld      hl,-6
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
; [96]   Best := 0;
                ld      de,ix
                ld      hl,-20
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                ld      hl,de
                call    FLOAT
                exx
                pop     hl
                call    __storefp
; [97] 
; [98]   for I := 0 to Size - 1 do
                ld      de,ix
                ld      hl,-2
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
                ld      hl,global81     ; Get global Size
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                push    de
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak115
forloop114:
; [99]   begin
; [100]     Write('.');
                ld      de,46           ; Literal 46
                ld      hl,de
                ld      a,l
                call    __putc
; [101]     if I mod 33 = 32 then WriteLn((I + 1) * 100 / Size:4, '%');
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,33           ; Literal 33
                pop     hl
                call    __sdiv16        ; Mod
                ex      hl,de
                push    hl
                ld      de,32           ; Literal 32
                pop     hl
                call    __int16_eq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,false117
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                add     hl,de
                push    hl
                ld      de,100          ; Literal 100
                pop     hl
                call    __mul16         ; Mul
                push    hl
                ld      hl,global81     ; Get global Size
                ld      de,(hl)
                pop     hl
                call    __sdiv16        ; Div
                push    hl
                ld      de,4            ; Literal 4
                ld      bc,de
                pop     hl
                call    __putn_fmt
                ld      de,37           ; Literal 37
                ld      hl,de
                ld      a,l
                call    __putc
                call    __newline
false117:
; [102] 
; [103]     for J := 0 to Size - 1 do
                ld      de,ix
                ld      hl,-4
                add     hl,de
                push    hl
                ld      de,0            ; Literal 0
                pop     hl
                ld      (hl),de
                ld      hl,global81     ; Get global Size
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                xor     a
                sbc     hl,de
                ld      de,hl
                push    de
                push    de
                ld      de,ix
                ld      hl,-4
                add     hl,de
                ld      de,(hl)
                pop     hl
                call    __int16_geq
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak119
forloop118:
; [104]     begin
; [105]       CheckTree(I, J, Visible, Score);
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,-4
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,ix
                ld      hl,-8
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-14
                add     hl,de
                push    hl
                call    proc93
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
; Cleanup 2 bytes
                pop     hl
; [106]       if Visible > 0 then Trees := Trees + 1;
                ld      de,ix
                ld      hl,-8
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,0            ; Literal 0
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,false121
                ld      de,ix
                ld      hl,-6
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-6
                add     hl,de
                ld      de,(hl)
                push    de
                ld      de,1            ; Literal 1
                pop     hl
                add     hl,de
                ld      de,hl
                pop     hl
                ld      (hl),de
false121:
; [107]       if Score > Best then Best := Score;
                ld      de,ix
                ld      hl,-14
                add     hl,de
                call    __loadfp
                pushfp
        push    bc
        push    de
        push    hl
                ld      de,ix
                ld      hl,-20
                add     hl,de
                call    __loadfp
                exx
                popfp
        pop     hl
        pop     de
        pop     bc
                call    __fltleq
                ld      hl,de
                ld      a,1
                xor     l
                ld      l,a
                bit     0,l
                jp      z,false122
                ld      de,ix
                ld      hl,-20
                add     hl,de
                push    hl
                ld      de,ix
                ld      hl,-14
                add     hl,de
                call    __loadfp
                exx
                pop     hl
                call    __storefp
false122:
; [108]     end;
fornext120:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-4
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak119
                ld      de,ix
                ld      hl,-4
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop118
forbreak119:    pop     de              ; Cleanup limit
; [109]   end;
fornext116:
                pop     de              ; Dup and check limit
                push    de
                push    de
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                pop     de
                call    __int16_lt
                ld      h,0
                ld      l,a
                bit     0,l
                jp      z,forbreak115
                ld      de,ix
                ld      hl,-2
                add     hl,de
                ld      de,(hl)
                inc     de
                ld      (hl),de
                jp      forloop114
forbreak115:    pop     de              ; Cleanup limit
; [110] 
; [111]   WriteLn;
                call    __newline
; [112]   WriteLn('Part 1: ', Trees, ' trees are visible.');
                ld      hl,string123
                call    __puts
                ld      de,ix
                ld      hl,-6
                add     hl,de
                ld      de,(hl)
                ld      hl,de
                call    __putn
                ld      hl,string124
                call    __puts
                call    __newline
; [113]   WriteLn('Part 2: Scenic score is ', Best:0:0, '.');
                ld      hl,string125
                call    __puts
                ld      de,ix
                ld      hl,-20
                add     hl,de
                call    __loadfp
                pushfp
        push    bc
        push    de
        push    hl
                ld      de,0            ; Literal 0
                push    de
                ld      de,0            ; Literal 0
                ld      bc,de
                pop     de
                exx
                popfp
        pop     hl
        pop     de
        pop     bc
                call    __putf_fix
                ld      de,46           ; Literal 46
                ld      hl,de
                ld      a,l
                call    __putc
                call    __newline
; [114] end;
exit112:        ld      sp,ix           ; Epilogue
                pop     hl
                ld      (display+4),hl
                pop     ix
                ret
; [115] 
; [116] begin
; 
; var Mem(0), HeapPtr(0), AssertPassed(0), AssertFailed(0), Map(0), Size(0)
; 
main:           call    __init
                ld      ix,0
                add     ix,sp
; [117]   Write(#27'TR050');
                ld      hl,string127
                call    __puts
; [118]   ClrScr;
                call    __clrscr
; [119] 
; [120]   WriteLn('*** AoC 2022.08 Treetop Tree House ***');
                ld      hl,string128
                call    __puts
                call    __newline
; [121]   WriteLn;
                call    __newline
; [122] 
; [123]   Load;
                call    proc82
; [124]   Process;
                call    proc111
; [125] end.
exit126:        call    __done
                ret
; 
string58:       db      0
; 
string84:       db      31,"           ",27,"p    Loading     ",27,"q"
; 
string85:       db      12,"INPUT   .TXT"
; 
string113:      db      31,"           ",27,"p   Processing   ",27,"q"
; 
string123:      db      8,"Part 1: "
; 
string124:      db      19," trees are visible."
; 
string125:      db      24,"Part 2: Scenic score is "
; 
string127:      db      6,27,"TR050"
; 
string128:      db      38,"*** AoC 2022.08 Treetop Tree House ***"
; 
display:        ds      32              ; Display
; 
eof:                                    ; End of file
; 
; HEAP:
; 
; end
; 


; +++ segments +++

#CODE          = $0100 =   256,  size = $512A = 20778

; +++ global symbols +++

AAC1         = $0700 =  1792          math48.z80:382 (unused)
AC1          = $0EFB =  3835          math48.z80:1913
ACLN2        = $0B33 =  2867          math48.z80:1210
ACPI         = $0B29 =  2857          math48.z80:1203
ADD1         = $0573 =  1395          math48.z80:52
ADD10        = $05DE =  1502          math48.z80:134
ADD2         = $0586 =  1414          math48.z80:71
ADD3         = $059B =  1435          math48.z80:89
ADD4         = $05A6 =  1446          math48.z80:98
ADD5         = $05BA =  1466          math48.z80:111
ADD6         = $05C4 =  1476          math48.z80:117
ADD7         = $05C7 =  1479          math48.z80:118
ADD8         = $05D8 =  1496          math48.z80:129
ADD9         = $05D9 =  1497          math48.z80:130
ADD9A        = $05DD =  1501          math48.z80:132
ADDAC        = $06FD =  1789          math48.z80:379
ADDZ         = $05D5 =  1493          math48.z80:127
ARCTAN       = $0AD1 =  2769          math48.z80:1137
ARCTK        = $0AB3 =  2739          math48.z80:1124
ATN          = $09E2 =  2530          math48.z80:1002
ATN1         = $09F7 =  2551          math48.z80:1019
ATN2         = $0A05 =  2565          math48.z80:1029
ATN3         = $0A1A =  2586          math48.z80:1040
ATN4         = $0A20 =  2592          math48.z80:1043
ATN5         = $0A3B =  2619          math48.z80:1060
ATN6         = $0A69 =  2665          math48.z80:1084
ATN7         = $0A77 =  2679          math48.z80:1095
ATN8         = $0A7F =  2687          math48.z80:1099
ATNK         = $0A83 =  2691          math48.z80:1105
CALC1        = $0AF0 =  2800          math48.z80:1166
CALCS        = $0AEC =  2796          math48.z80:1164
CMP          = $074A =  1866          math48.z80:466
CMP1         = $0754 =  1876          math48.z80:475
CMP2         = $075E =  1886          math48.z80:483
CMPAC        = $0731 =  1841          math48.z80:437
CNV1         = $0E59 =  3673          math48.z80:1798
CNV2         = $0E6E =  3694          math48.z80:1811
CNV3         = $0E92 =  3730          math48.z80:1833
CNV4         = $0E95 =  3733          math48.z80:1836
CNV4A        = $0EAA =  3754          math48.z80:1846
CNV4B        = $0EAC =  3756          math48.z80:1848
CNV4C        = $0EC4 =  3780          math48.z80:1866
CNV4D        = $0ECC =  3788          math48.z80:1871
CNV5         = $0ECD =  3789          math48.z80:1873
CNV6         = $0EDA =  3802          math48.z80:1881
CNV6A        = $0EB0 =  3760          math48.z80:1850
CNVN         = $0E3B =  3643          math48.z80:1779
COMSER       = $0AD7 =  2775          math48.z80:1145
CON10        = $0DD5 =  3541          math48.z80:1722
COS          = $080A =  2058          math48.z80:653
CPM          = $0001 =     1          treetop.z80:4 (unused)
DIGI1        = $0C1C =  3100          math48.z80:1428
DIGI2        = $0C28 =  3112          math48.z80:1434
DIGITS       = $0BD2 =  3026          math48.z80:1374
DIGTST       = $0EF4 =  3828          math48.z80:1905
DIVI1        = $0616 =  1558          math48.z80:192
DIVI2        = $061F =  1567          math48.z80:197
DIVI3        = $0632 =  1586          math48.z80:211
DIVI4        = $063E =  1598          math48.z80:219
DIVI5        = $0647 =  1607          math48.z80:224
DIVI6        = $0653 =  1619          math48.z80:233
DZERO        = $0BCC =  3020          math48.z80:1371
EQUAL        = $0B3D =  2877          math48.z80:1217
EXP          = $0971 =  2417          math48.z80:920
EXP1         = $0995 =  2453          math48.z80:945 (unused)
EXP3         = $09A2 =  2466          math48.z80:951 (unused)
EXP4         = $09A7 =  2471          math48.z80:956
EXP5         = $09A9 =  2473          math48.z80:958
EXP6         = $09AC =  2476          math48.z80:960
EXPK         = $09B8 =  2488          math48.z80:969
EXPN         = $0080 =   128          math48.z80:39
EXPS1        = $06C0 =  1728          math48.z80:324
EXPS2        = $06C4 =  1732          math48.z80:327
EXPS3        = $06DB =  1755          math48.z80:343
EXPSGN       = $06B8 =  1720          math48.z80:319
FIX          = $0B45 =  2885          math48.z80:1229
FIX1         = $0B4F =  2895          math48.z80:1236
FIX2         = $0B5B =  2907          math48.z80:1244
FIX3         = $0B68 =  2920          math48.z80:1252
FIX4         = $0B6B =  2923          math48.z80:1256
FLOAT        = $0B6F =  2927          math48.z80:1262
FLT1         = $0B7F =  2943          math48.z80:1274
FLT2         = $0B88 =  2952          math48.z80:1280
FLT3         = $0B92 =  2962          math48.z80:1286
FPADD        = $056C =  1388          math48.z80:47
FPDIV        = $05FB =  1531          math48.z80:165
FPMUL        = $065A =  1626          math48.z80:242
FPNEG        = $05F1 =  1521          math48.z80:152
FPSUB        = $05E4 =  1508          math48.z80:144
FRAC         = $079C =  1948          math48.z80:546
FSTRR        = $0B97 =  2967          math48.z80:1325
FSTRS        = $0B9E =  2974          math48.z80:1338
FWIDTH       = $000F =    15          math48.z80:42
GDTST        = $0EF1 =  3825          math48.z80:1904
GETCIX       = $0B16 =  2838          math48.z80:1193
GTNCIX       = $0B11 =  2833          math48.z80:1191
INT          = $0768 =  1896          math48.z80:495
INT1         = $0778 =  1912          math48.z80:508
INT2         = $0799 =  1945          math48.z80:539
IWIDTH       = $00F0 =   240          math48.z80:41
LEFT         = $06F2 =  1778          math48.z80:370
LN           = $08D5 =  2261          math48.z80:806
LN1          = $092A =  2346          math48.z80:864
LNK          = $0942 =  2370          math48.z80:880
LOG          = $08BE =  2238          math48.z80:783
M10A         = $0E34 =  3636          math48.z80:1771
MFACT        = $0EDD =  3805          math48.z80:1885
MOD          = $07AE =  1966          math48.z80:564
MORED        = $0D92 =  3474          math48.z80:1679
MUL1         = $0676 =  1654          math48.z80:267
MUL10        = $0E11 =  3601          math48.z80:1746
MUL2         = $067D =  1661          math48.z80:271
MUL3         = $0685 =  1669          math48.z80:276
MUL4         = $06A1 =  1697          math48.z80:296
MUL5         = $06A4 =  1700          math48.z80:300
MUL5A        = $06A5 =  1701          math48.z80:301
OEX1         = $0D53 =  3411          math48.z80:1636
OEX2         = $0D59 =  3417          math48.z80:1639
OM1          = $0CB0 =  3248          math48.z80:1536
OM10         = $0D09 =  3337          math48.z80:1592
OM11         = $0D12 =  3346          math48.z80:1598
OM12         = $0D19 =  3353          math48.z80:1602
OM13         = $0D29 =  3369          math48.z80:1612
OM14         = $0D32 =  3378          math48.z80:1618
OM15         = $0D3E =  3390          math48.z80:1624
OM2          = $0CC8 =  3272          math48.z80:1552
OM3          = $0CC9 =  3273          math48.z80:1553
OM4          = $0CCE =  3278          math48.z80:1556
OM5          = $0CD9 =  3289          math48.z80:1565
OM6          = $0CE3 =  3299          math48.z80:1571
OM7          = $0CF3 =  3315          math48.z80:1579
OM8          = $0CFF =  3327          math48.z80:1585
OM9          = $0D02 =  3330          math48.z80:1587
OUTM         = $0CA8 =  3240          math48.z80:1530
OUTN1        = $0BAD =  2989          math48.z80:1346
POPA1        = $0D68 =  3432          math48.z80:1647
POPALL       = $0D69 =  3433          math48.z80:1648
PWR          = $0966 =  2406          math48.z80:898
RIGHT        = $06E6 =  1766          math48.z80:360
ROU1         = $0C74 =  3188          math48.z80:1490
ROU2         = $0C7A =  3194          math48.z80:1494
ROU3         = $0C82 =  3202          math48.z80:1501
ROU4         = $0C89 =  3209          math48.z80:1506
ROU5         = $0C98 =  3224          math48.z80:1517
ROU6         = $0CA1 =  3233          math48.z80:1524
ROUND        = $0C67 =  3175          math48.z80:1481 (unused)
SAC1         = $071A =  1818          math48.z80:411 (unused)
SC1          = $0BDE =  3038          math48.z80:1387
SC2          = $0BF8 =  3064          math48.z80:1409
SC3          = $0C0B =  3083          math48.z80:1418
SC4          = $0C14 =  3092          math48.z80:1423
SIGN         = $0080 =   128          math48.z80:38
SIN          = $0818 =  2072          math48.z80:677
SIN1A        = $0831 =  2097          math48.z80:695 (unused)
SIN2         = $0838 =  2104          math48.z80:699
SIN3         = $0844 =  2116          math48.z80:707
SIN4         = $0851 =  2129          math48.z80:716
SIN7         = $089C =  2204          math48.z80:762
SIN7A        = $0891 =  2193          math48.z80:754
SINC         = $081C =  2076          math48.z80:681
SINK         = $08A0 =  2208          math48.z80:767
SLEFT        = $06F1 =  1777          math48.z80:369
SQR          = $07B8 =  1976          math48.z80:580
SQR1         = $07D3 =  2003          math48.z80:603
SQR2         = $07F3 =  2035          math48.z80:629
SRIGHT       = $06E5 =  1765          math48.z80:359
STOA         = $0D8C =  3468          math48.z80:1673
STODIG       = $0D80 =  3456          math48.z80:1667
STOZ         = $0D8A =  3466          math48.z80:1672
SUB1         = $05EB =  1515          math48.z80:149
SUBAC        = $0717 =  1815          math48.z80:408
TAN          = $07F6 =  2038          math48.z80:636
TENF         = $0D9A =  3482          math48.z80:1687
TF1          = $0DA1 =  3489          math48.z80:1691
TF2          = $0DAD =  3501          math48.z80:1697
TF3          = $0DC2 =  3522          math48.z80:1708
TF4          = $0DCC =  3532          math48.z80:1714
ZERO         = $06DD =  1757          math48.z80:348
__abs16      = $0206 =   518          pl0.z80:264 (unused)
__assert     = $1230 =  4656          pl0.z80:1757 (unused)
__assert1    = $123C =  4668          pl0.z80:1765
__assert_msg_1 = $125D =  4701          pl0.z80:1780
__assert_msg_2 = $1276 =  4726          pl0.z80:1781
__assertfailed = $1280 =  4736          pl0.z80:1784
__assertpassed = $127E =  4734          pl0.z80:1783
__atof       = $0F77 =  3959          pl0.z80:1067
__atoi       = $12AD =  4781          pl0.z80:1833
__atoi_done  = $12D3 =  4819          pl0.z80:1857
__atoi_loop  = $12BD =  4797          pl0.z80:1843
__atoi_skip  = $12CF =  4815          pl0.z80:1854
__begcmp     = $0244 =   580          pl0.z80:344
__boolean0   = $0128 =   296          pl0.z80:32
__boolean1   = $0123 =   291          pl0.z80:31
__boolean_enum = $012E =   302          pl0.z80:33 (unused)
__buffer     = $0103 =   259          pl0.z80:19
__chkde      = $0191 =   401          pl0.z80:154
__chklen     = $0354 =   852          pl0.z80:559 (unused)
__clrscr     = $1319 =  4889          pl0.z80:1931
__clrscr_str = $1320 =  4896          pl0.z80:1934
__cmplen     = $0250 =   592          pl0.z80:356
__cmplp      = $0249 =   585          pl0.z80:349
__cmplp2     = $02E2 =   738          pl0.z80:457
__cnt1ok     = $0328 =   808          pl0.z80:518
__cnt2ok     = $0334 =   820          pl0.z80:525
__cntok      = $03C9 =   969          pl0.z80:658
__concat     = $0421 =  1057          pl0.z80:760 (unused)
__copy       = $045A =  1114          pl0.z80:802 (unused)
__count      = $01E8 =   488          pl0.z80:219 (unused)
__cpyerr     = $0348 =   840          pl0.z80:544
__cur_off_str = $1336 =  4918          pl0.z80:1959
__cur_on_str = $132C =  4908          pl0.z80:1948
__cursor_off = $132F =  4911          pl0.z80:1956 (unused)
__cursor_on  = $1325 =  4901          pl0.z80:1945 (unused)
__delerr     = $03DE =   990          pl0.z80:678
__delete     = $0481 =  1153          pl0.z80:834 (unused)
__div10      = $01F2 =   498          pl0.z80:245
__div10a     = $01FC =   508          pl0.z80:254
__div10b     = $0203 =   515          pl0.z80:260
__divide     = $01C4 =   452          pl0.z80:192
__docat      = $0295 =   661          pl0.z80:404
__dodiv      = $019C =   412          pl0.z80:163
__done       = $13E7 =  5095          pl0.z80:2273
__dorem      = $01AD =   429          pl0.z80:174
__drop       = $01DA =   474          pl0.z80:206
__dvloop     = $01CC =   460          pl0.z80:197
__erexit     = $0345 =   837          pl0.z80:539
__exit       = $02A1 =   673          pl0.z80:412
__flteq      = $0F3A =  3898          pl0.z80:1021 (unused)
__flteq0     = $0F3F =  3903          pl0.z80:1024 (unused)
__flteq1     = $0F43 =  3907          pl0.z80:1027
__fltleq     = $0F61 =  3937          pl0.z80:1051
__fltleq0    = $0F68 =  3944          pl0.z80:1055 (unused)
__fltleq1    = $0F6C =  3948          pl0.z80:1058
__fltlt      = $0F54 =  3924          pl0.z80:1041 (unused)
__fltlt0     = $0F59 =  3929          pl0.z80:1044 (unused)
__fltlt1     = $0F5D =  3933          pl0.z80:1047
__fltneq     = $0F47 =  3911          pl0.z80:1031 (unused)
__fltneq0    = $0F4C =  3916          pl0.z80:1034 (unused)
__fltneq1    = $0F50 =  3920          pl0.z80:1037
__fltpwr2    = $0F70 =  3952          pl0.z80:1062 (unused)
__found      = $02F1 =   753          pl0.z80:469
__freemem    = $13C6 =  5062          pl0.z80:2206
__ftoa       = $0F87 =  3975          pl0.z80:1076
__ftoaerr    = $0FD3 =  4051          pl0.z80:1100
__ftoalp     = $0F9E =  3998          pl0.z80:1087
__ftoaok     = $0F98 =  3992          pl0.z80:1084
__ftoatmp    = $0FB2 =  4018          pl0.z80:1098
__get_heap_bytes = $13DC =  5084          pl0.z80:2226 (unused)
__get_heap_start = $13D8 =  5080          pl0.z80:2222 (unused)
__getmem     = $133D =  4925          pl0.z80:2119 (unused)
__getn       = $1209 =  4617          pl0.z80:1697 (unused)
__gotoxy     = $1301 =  4865          pl0.z80:1905 (unused)
__gotoxy_str = $1314 =  4884          pl0.z80:1914
__heapptr    = $133B =  4923          pl0.z80:2114
__idx0       = $0350 =   848          pl0.z80:554 (unused)
__idxl1      = $0378 =   888          pl0.z80:590
__idxlen     = $0368 =   872          pl0.z80:575
__index      = $02FD =   765          pl0.z80:483
__init       = $13E6 =  5094          pl0.z80:2241
__inserr     = $03A3 =   931          pl0.z80:625
__insert     = $046D =  1133          pl0.z80:817 (unused)
__int16_case = $0156 =   342          pl0.z80:97 (unused)
__int16_eq   = $0132 =   306          pl0.z80:41
__int16_geq  = $014A =   330          pl0.z80:84
__int16_geq_of = $0153 =   339          pl0.z80:91
__int16_lt   = $013E =   318          pl0.z80:67
__int16_lt_of = $0147 =   327          pl0.z80:74
__int16_neq  = $0138 =   312          pl0.z80:54
__itoa       = $1282 =  4738          pl0.z80:1793
__itoa_loop1 = $1297 =  4759          pl0.z80:1806
__itoa_loop2 = $12A5 =  4773          pl0.z80:1816
__length     = $04E0 =  1248          pl0.z80:908
__lenok      = $028E =   654          pl0.z80:400
__lenok2     = $037F =   895          pl0.z80:594
__lens1      = $0258 =   600          pl0.z80:361
__lens2      = $0259 =   601          pl0.z80:363
__loadfp     = $0F05 =  3845          pl0.z80:993
__loadstr    = $04ED =  1261          pl0.z80:920
__malloc     = $134E =  4942          pl0.z80:2134
__malloc_check_larger = $1372 =  4978          pl0.z80:2158
__malloc_error_message = $13B8 =  5048          pl0.z80:2202
__malloc_infinite_loop = $13B5 =  5045          pl0.z80:2200
__malloc_loop = $1355 =  4949          pl0.z80:2138
__malloc_next = $139C =  5020          pl0.z80:2188
__malloc_out_of_memory = $13AF =  5039          pl0.z80:2197
__maxlen     = $0347 =   839          pl0.z80:542
__movestr    = $0510 =  1296          pl0.z80:951
__movestr_1  = $0516 =  1302          pl0.z80:956
__mul10      = $01E9 =   489          pl0.z80:228
__mul16      = $0168 =   360          pl0.z80:118
__mul16a     = $016F =   367          pl0.z80:122
__mul16b     = $0176 =   374          pl0.z80:126
__mvesub     = $0398 =   920          pl0.z80:617
__neg16      = $0209 =   521          pl0.z80:269 (unused)
__newline    = $1114 =  4372          pl0.z80:1451
__notfnd     = $02F5 =   757          pl0.z80:472
__okexit     = $0343 =   835          pl0.z80:536 (unused)
__okexit2    = $03DC =   988          pl0.z80:675 (unused)
__poke       = $1339 =  4921          pl0.z80:1973 (unused)
__pos        = $0447 =  1095          pl0.z80:787 (unused)
__putc       = $10FD =  4349          pl0.z80:1410
__putc_fmt   = $11CF =  4559          pl0.z80:1646 (unused)
__pute       = $11C5 =  4549          pl0.z80:1636 (unused)
__pute_fmt   = $11FF =  4607          pl0.z80:1680 (unused)
__putf       = $0FD9 =  4057          pl0.z80:1103 (unused)
__putf_exp   = $0FE5 =  4069          pl0.z80:1111 (unused)
__putf_exp_0 = $0FF0 =  4080          pl0.z80:1119
__putf_exp_1 = $0FF9 =  4089          pl0.z80:1125
__putf_fix   = $1005 =  4101          pl0.z80:1134
__putf_fix_1 = $1008 =  4104          pl0.z80:1141 (unused)
__putn       = $11B6 =  4534          pl0.z80:1621
__putn_fmt   = $11EF =  4591          pl0.z80:1671
__puts       = $1104 =  4356          pl0.z80:1431
__puts_fmt   = $11DA =  4570          pl0.z80:1654
__puts_fmt_1 = $11EB =  4587          pl0.z80:1667
__puts_fmt_loop = $11E2 =  4578          pl0.z80:1661
__putschk    = $1110 =  4368          pl0.z80:1440
__putsloop   = $1108 =  4360          pl0.z80:1434
__ralign     = $1192 =  4498          pl0.z80:1571
__ralign1    = $1198 =  4504          pl0.z80:1577
__ralign2    = $11B1 =  4529          pl0.z80:1603
__rand16     = $0218 =   536          pl0.z80:291
__random     = $0210 =   528          pl0.z80:283 (unused)
__recalc     = $031F =   799          pl0.z80:511
__s1adr      = $02AD =   685          pl0.z80:419
__s1len      = $02AF =   687          pl0.z80:421
__s2len      = $02B0 =   688          pl0.z80:423
__sdiv16     = $017E =   382          pl0.z80:141
__setadd     = $107C =  4220          pl0.z80:1254 (unused)
__setadd1    = $1087 =  4231          pl0.z80:1261
__seteq      = $10B7 =  4279          pl0.z80:1324 (unused)
__seteq1     = $10C2 =  4290          pl0.z80:1331
__seteq2     = $10CE =  4302          pl0.z80:1340
__setexclude = $1072 =  4210          pl0.z80:1238 (unused)
__setgeq     = $10EF =  4335          pl0.z80:1380 (unused)
__setin_new  = $1016 =  4118          pl0.z80:1162 (unused)
__setinclude = $106A =  4202          pl0.z80:1230 (unused)
__setleq     = $10D2 =  4306          pl0.z80:1351 (unused)
__setleq1    = $10DD =  4317          pl0.z80:1358
__setleq2    = $10EB =  4331          pl0.z80:1369
__setmember  = $1054 =  4180          pl0.z80:1216 (unused)
__setmul     = $10A4 =  4260          pl0.z80:1301 (unused)
__setmul1    = $10AF =  4271          pl0.z80:1308
__setoff     = $102D =  4141          pl0.z80:1181
__setoff1    = $103D =  4157          pl0.z80:1193
__setoff2    = $1045 =  4165          pl0.z80:1198
__setoff3    = $1051 =  4177          pl0.z80:1205
__setsub     = $108F =  4239          pl0.z80:1277 (unused)
__setsub1    = $109A =  4250          pl0.z80:1284
__slen       = $02FB =   763          pl0.z80:479 (unused)
__slp1       = $02CF =   719          pl0.z80:448
__slp2       = $02ED =   749          pl0.z80:466
__squot      = $01E6 =   486          pl0.z80:217
__srem       = $01E7 =   487          pl0.z80:218
__storefp    = $0F1F =  3871          pl0.z80:1007
__storestr   = $04FC =  1276          pl0.z80:935
__str_fix_1  = $1168 =  4456          pl0.z80:1528 (unused)
__str_int    = $0493 =  1171          pl0.z80:850 (unused)
__stradd     = $043A =  1082          pl0.z80:778
__strc       = $113E =  4414          pl0.z80:1489 (unused)
__strcat     = $025A =   602          pl0.z80:368
__strcmp     = $0238 =   568          pl0.z80:336
__strcpy     = $02FE =   766          pl0.z80:488
__strdel     = $03A4 =   932          pl0.z80:629
__stre       = $1188 =  4488          pl0.z80:1551 (unused)
__streq      = $03DF =   991          pl0.z80:687 (unused)
__streq0     = $03EF =  1007          pl0.z80:697
__streq1     = $03F3 =  1011          pl0.z80:702
__strf       = $1155 =  4437          pl0.z80:1509 (unused)
__strf2      = $1165 =  4453          pl0.z80:1521 (unused)
__strgov     = $02B1 =   689          pl0.z80:425
__string     = $02F7 =   759          pl0.z80:475
__strins     = $0349 =   841          pl0.z80:548
__strleq     = $040B =  1035          pl0.z80:740 (unused)
__strleq0    = $0419 =  1049          pl0.z80:748 (unused)
__strleq1    = $041D =  1053          pl0.z80:753
__strlt      = $03F7 =  1015          pl0.z80:715 (unused)
__strlt0     = $0403 =  1027          pl0.z80:722 (unused)
__strlt1     = $0407 =  1031          pl0.z80:727
__strn       = $111F =  4383          pl0.z80:1467
__strn_fmt   = $1132 =  4402          pl0.z80:1479 (unused)
__strpos     = $02B2 =   690          pl0.z80:429
__strs       = $1146 =  4422          pl0.z80:1498 (unused)
__sublen     = $02FC =   764          pl0.z80:481
__substg     = $02F9 =   761          pl0.z80:477
__textbg     = $12F0 =  4848          pl0.z80:1886 (unused)
__textbg_str = $12FD =  4861          pl0.z80:1892
__textfg     = $12DF =  4831          pl0.z80:1867 (unused)
__textfg_str = $12EC =  4844          pl0.z80:1873
__toolng     = $0279 =   633          pl0.z80:388
__trunc      = $035E =   862          pl0.z80:567
__trunc2     = $03C1 =   961          pl0.z80:651
__udiv16     = $01B9 =   441          pl0.z80:184
__val_float  = $04CA =  1226          pl0.z80:883 (unused)
__val_int    = $04AB =  1195          pl0.z80:865 (unused)
_end         = $522A = 21034          treetop.z80:6 (unused)
_size        = $512A = 20778          treetop.z80:6 (unused)
display      = $520A = 21002          treetop.z80:3267
eof          = $522A = 21034          treetop.z80:3269
exit112      = $5127 = 20775          treetop.z80:3215 (unused)
exit126      = $5154 = 20820          treetop.z80:3246 (unused)
exit3        = $143A =  5178          treetop.z80:128 (unused)
exit39       = $179D =  6045          treetop.z80:701 (unused)
exit47       = $18B8 =  6328          treetop.z80:864 (unused)
exit49       = $1A07 =  6663          treetop.z80:1053 (unused)
exit5        = $1510 =  5392          treetop.z80:245 (unused)
exit51       = $1AA8 =  6824          treetop.z80:1141 (unused)
exit53       = $1B9F =  7071          treetop.z80:1273 (unused)
exit57       = $1CB5 =  7349          treetop.z80:1428 (unused)
exit65       = $1D56 =  7510          treetop.z80:1516 (unused)
exit67       = $1E1C =  7708          treetop.z80:1621 (unused)
exit70       = $1F05 =  7941          treetop.z80:1749 (unused)
exit75       = $1FA2 =  8098          treetop.z80:1834 (unused)
exit78       = $2037 =  8247          treetop.z80:1924 (unused)
exit83       = $498A = 18826          treetop.z80:2241 (unused)
exit9        = $1605 =  5637          treetop.z80:378 (unused)
exit94       = $4E85 = 20101          treetop.z80:2879 (unused)
false102     = $4BA8 = 19368          treetop.z80:2522
false106     = $4C96 = 19606          treetop.z80:2642
false11      = $15EB =  5611          treetop.z80:364
false110     = $4D8C = 19852          treetop.z80:2766
false117     = $4F7C = 20348          treetop.z80:3009
false12      = $15C5 =  5573          treetop.z80:343
false121     = $502B = 20523          treetop.z80:3098
false122     = $506F = 20591          treetop.z80:3129
false54      = $1AFF =  6911          treetop.z80:1190
false55      = $1B89 =  7049          treetop.z80:1259
false60      = $1CB5 =  7349          treetop.z80:1426
false61      = $1C3A =  7226          treetop.z80:1363
false62      = $1C58 =  7256          treetop.z80:1379
false63      = $1CB2 =  7346          treetop.z80:1423
false68      = $1DAD =  7597          treetop.z80:1564
false7       = $14F6 =  5366          treetop.z80:231
false76      = $1F5C =  8028          treetop.z80:1796
false79      = $2003 =  8195          treetop.z80:1895
false89      = $4873 = 18547          treetop.z80:2095
false98      = $4AB2 = 19122          treetop.z80:2398
forbreak100  = $4BD9 = 19417          treetop.z80:2546
forbreak104  = $4CC5 = 19653          treetop.z80:2665
forbreak108  = $4DBD = 19901          treetop.z80:2790
forbreak115  = $50D2 = 20690          treetop.z80:3177
forbreak119  = $50A0 = 20640          treetop.z80:3153
forbreak41   = $16EE =  5870          treetop.z80:612
forbreak44   = $179C =  6044          treetop.z80:699
forbreak72   = $1ED8 =  7896          treetop.z80:1720
forbreak87   = $4979 = 18809          treetop.z80:2227
forbreak91   = $4930 = 18736          treetop.z80:2188
forbreak96   = $4AE1 = 19169          treetop.z80:2421
forloop103   = $4C1D = 19485          treetop.z80:2579
forloop107   = $4D13 = 19731          treetop.z80:2703
forloop114   = $4F12 = 20242          treetop.z80:2957
forloop118   = $4FB8 = 20408          treetop.z80:3039
forloop40    = $166F =  5743          treetop.z80:548
forloop43    = $171D =  5917          treetop.z80:635
forloop71    = $1E7A =  7802          treetop.z80:1674
forloop86    = $4809 = 18441          treetop.z80:2043
forloop90    = $48AF = 18607          treetop.z80:2124
forloop95    = $4A39 = 19001          treetop.z80:2335
forloop99    = $4B2F = 19247          treetop.z80:2459
fornext101   = $4BA8 = 19368          treetop.z80:2524 (unused)
fornext105   = $4C96 = 19606          treetop.z80:2644 (unused)
fornext109   = $4D8C = 19852          treetop.z80:2768 (unused)
fornext116   = $50A1 = 20641          treetop.z80:3155 (unused)
fornext120   = $506F = 20591          treetop.z80:3131 (unused)
fornext42    = $16BD =  5821          treetop.z80:590 (unused)
fornext45    = $176B =  5995          treetop.z80:677 (unused)
fornext73    = $1EA7 =  7847          treetop.z80:1698 (unused)
fornext88    = $4948 = 18760          treetop.z80:2205 (unused)
fornext92    = $48FF = 18687          treetop.z80:2166 (unused)
fornext97    = $4AB2 = 19122          treetop.z80:2400 (unused)
func4        = $1443 =  5187          treetop.z80:142 (unused)
func52       = $1AB1 =  6833          treetop.z80:1154
func74       = $1F0E =  7950          treetop.z80:1760 (unused)
func8        = $1519 =  5401          treetop.z80:259 (unused)
global80     = $2040 =  8256          treetop.z80:1933
global81     = $4750 = 18256          treetop.z80:1935
main         = $5130 = 20784          treetop.z80:3225
proc111      = $4E8E = 20110          treetop.z80:2893
proc2        = $13EB =  5099          treetop.z80:92 (unused)
proc38       = $160E =  5646          treetop.z80:500
proc46       = $17A6 =  6054          treetop.z80:714
proc48       = $18C1 =  6337          treetop.z80:877 (unused)
proc50       = $1A10 =  6672          treetop.z80:1066
proc56       = $1BA8 =  7080          treetop.z80:1286
proc64       = $1CBE =  7358          treetop.z80:1441
proc66       = $1D5F =  7519          treetop.z80:1528
proc69       = $1E25 =  7717          treetop.z80:1634 (unused)
proc77       = $1FAB =  8107          treetop.z80:1847
proc82       = $4752 = 18258          treetop.z80:1945
proc93       = $4993 = 18835          treetop.z80:2255
seed1        = $0234 =   564          pl0.z80:324
seed2        = $0236 =   566          pl0.z80:325
string113    = $5186 = 20870          treetop.z80:3255
string123    = $51A6 = 20902          treetop.z80:3257
string124    = $51AF = 20911          treetop.z80:3259
string125    = $51C3 = 20931          treetop.z80:3261
string127    = $51DC = 20956          treetop.z80:3263
string128    = $51E3 = 20963          treetop.z80:3265
string58     = $5158 = 20824          treetop.z80:3249
string84     = $5159 = 20825          treetop.z80:3251
string85     = $5179 = 20857          treetop.z80:3253
while10      = $1554 =  5460          treetop.z80:286
while59      = $1BD3 =  7123          treetop.z80:1307
while6       = $147E =  5246          treetop.z80:169


total time: 0.0492 sec.
no errors
